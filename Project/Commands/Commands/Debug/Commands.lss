
Commands.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001f2  00000286  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5c  00000000  00000000  000002e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000706  00000000  00000000  00000d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022e  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000164  00000000  00000000  00001956  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001de  000001de  00000272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .rodata       00000006  00800100  000001ec  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.main    00000104  000000c4  000000c4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  000001e6  000001e6  0000027a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000001e8  000001e8  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000001ea  000001ea  0000027e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  000001c8  000001c8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  000001e2  000001e2  00000276  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
   8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
   c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  10:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  14:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  18:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  1c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  20:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  24:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  28:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  2c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  30:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  34:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  38:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  3c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  40:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  44:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  48:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  4c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  50:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  54:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  58:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  5c:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  60:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>
  64:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 06       	cpc	r0, r17
  6c:	00 01       	movw	r0, r0
  6e:	ec 00       	.word	0x00ec	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	e8 e6       	ldi	r30, 0x68	; 104
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	17 c0       	rjmp	.+46     	; 0xb2 <__do_clear_bss+0x8>
  84:	b5 91       	lpm	r27, Z+
  86:	a5 91       	lpm	r26, Z+
  88:	35 91       	lpm	r19, Z+
  8a:	25 91       	lpm	r18, Z+
  8c:	05 91       	lpm	r16, Z+
  8e:	07 fd       	sbrc	r16, 7
  90:	0c c0       	rjmp	.+24     	; 0xaa <__do_clear_bss>
  92:	95 91       	lpm	r25, Z+
  94:	85 91       	lpm	r24, Z+
  96:	ef 01       	movw	r28, r30
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0x20>
  a6:	fe 01       	movw	r30, r28
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_clear_bss+0x8>

000000aa <__do_clear_bss>:
  aa:	1d 92       	st	X+, r1
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	e1 f7       	brne	.-8      	; 0xaa <__do_clear_bss>
  b2:	ef 36       	cpi	r30, 0x6F	; 111
  b4:	f4 07       	cpc	r31, r20
  b6:	31 f7       	brne	.-52     	; 0x84 <__do_copy_data+0x8>
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <_etext>
  bc:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

000001de <__bad_interrupt>:
 1de:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000c4 <main>:

#include <xc.h>
#include <util/delay.h>

int main(void)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	00 d0       	rcall	.+0      	; 0xca <main+0x6>
  ca:	00 d0       	rcall	.+0      	; 0xcc <main+0x8>
  cc:	00 d0       	rcall	.+0      	; 0xce <main+0xa>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<5);
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	8a b9       	out	0x0a, r24	; 10
	//int arr[139] = {252,364,396,424,454,482,514,598,630,658,690,776,806,834,866,892,924,952,984,1070,1100,1186,1218,1244,1276,1304,1336,1366,1396,1480,1512,1598,1628,1656,1688,1716,1748,1776,1808,1834,1866,1894,1926,1954,1986,2014,2046,2072,2104,2132,2164,2194,2224,2252,2284,2310,2342,2370,2402,2486,2518,2546,2578,2608,2638,2666,2698,2724,2756,2784,2816,2844,2876,2904,2936,3022,3052,3080,3112,3138,3170,3198,3230,3258,3290,3318,3350,3436,3466,3550,3582,3668,3698,3784,3816,3900,3930,4016,4048,4076,4106,4134,4166,4194,4226,4310,4342,4372,4402,4430,4462,4488,4520,4548,4580,4608,4640,4668,4700,4726,4758,4786,4818,4904,4934,5018,5050,5080,5110,5138,5170,5196,5228,5256,5288,5316,5348,5376,5410};
	int arr[3] = {252,364,396};
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	e0 e0       	ldi	r30, 0x00	; 0
  dc:	f1 e0       	ldi	r31, 0x01	; 1
  de:	de 01       	movw	r26, r28
  e0:	11 96       	adiw	r26, 0x01	; 1
  e2:	01 90       	ld	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	8a 95       	dec	r24
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x1e>
	int i = 0;
	//PORTD |= (1 << 5);
	
	
   while(1){
	   for(int j = 0; j < 3; j++)
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	5b c0       	rjmp	.+182    	; 0x1a6 <main+0xe2>
	{
		if(j == 0)
  f0:	61 15       	cp	r22, r1
  f2:	71 05       	cpc	r23, r1
  f4:	89 f4       	brne	.+34     	; 0x118 <main+0x54>
		{
			i = abs(0 - arr[j]);
  f6:	fb 01       	movw	r30, r22
  f8:	ee 0f       	add	r30, r30
  fa:	ff 1f       	adc	r31, r31
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	2c 0f       	add	r18, r28
 102:	3d 1f       	adc	r19, r29
 104:	e2 0f       	add	r30, r18
 106:	f3 1f       	adc	r31, r19
 108:	20 81       	ld	r18, Z
 10a:	31 81       	ldd	r19, Z+1	; 0x01
 10c:	33 23       	and	r19, r19
 10e:	1c f5       	brge	.+70     	; 0x156 <main+0x92>
 110:	31 95       	neg	r19
 112:	21 95       	neg	r18
 114:	31 09       	sbc	r19, r1
 116:	1f c0       	rjmp	.+62     	; 0x156 <main+0x92>
		}
		else
		{
			i = abs(arr[j-1] - arr[j]);
 118:	fb 01       	movw	r30, r22
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	8c 0f       	add	r24, r28
 126:	9d 1f       	adc	r25, r29
 128:	e8 0f       	add	r30, r24
 12a:	f9 1f       	adc	r31, r25
 12c:	80 81       	ld	r24, Z
 12e:	91 81       	ldd	r25, Z+1	; 0x01
 130:	fb 01       	movw	r30, r22
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	2c 0f       	add	r18, r28
 13c:	3d 1f       	adc	r19, r29
 13e:	e2 0f       	add	r30, r18
 140:	f3 1f       	adc	r31, r19
 142:	20 81       	ld	r18, Z
 144:	31 81       	ldd	r19, Z+1	; 0x01
 146:	82 1b       	sub	r24, r18
 148:	93 0b       	sbc	r25, r19
 14a:	9c 01       	movw	r18, r24
 14c:	22 f4       	brpl	.+8      	; 0x156 <main+0x92>
 14e:	22 27       	eor	r18, r18
 150:	33 27       	eor	r19, r19
 152:	28 1b       	sub	r18, r24
 154:	39 0b       	sbc	r19, r25
		}
		
		if(j%2 == 0)
 156:	60 fd       	sbrc	r22, 0
 158:	16 c0       	rjmp	.+44     	; 0x186 <main+0xc2>
		{
			PORTD |= (1 << 5);
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	80 62       	ori	r24, 0x20	; 32
 15e:	8b b9       	out	0x0b, r24	; 11
			for(int k = 0; k < i/2; k++)
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	06 c0       	rjmp	.+12     	; 0x172 <main+0xae>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0xa4>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0xaa>
 16e:	4f 5f       	subi	r20, 0xFF	; 255
 170:	5f 4f       	sbci	r21, 0xFF	; 255
 172:	c9 01       	movw	r24, r18
 174:	33 23       	and	r19, r19
 176:	0c f4       	brge	.+2      	; 0x17a <main+0xb6>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	95 95       	asr	r25
 17c:	87 95       	ror	r24
 17e:	48 17       	cp	r20, r24
 180:	59 07       	cpc	r21, r25
 182:	8c f3       	brlt	.-30     	; 0x166 <main+0xa2>
 184:	0e c0       	rjmp	.+28     	; 0x1a2 <main+0xde>
				_delay_us(13.26); //2600
			}
		}
		else
		{
			PORTD &= ~(1 << 5);
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 7d       	andi	r24, 0xDF	; 223
 18a:	8b b9       	out	0x0b, r24	; 11
			for(int k = 0; k < i; k++)
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	05 c0       	rjmp	.+10     	; 0x19c <main+0xd8>
 192:	42 e0       	ldi	r20, 0x02	; 2
 194:	4a 95       	dec	r20
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0xd0>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xd6>
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	82 17       	cp	r24, r18
 19e:	93 07       	cpc	r25, r19
 1a0:	c4 f3       	brlt	.-16     	; 0x192 <main+0xce>
	int i = 0;
	//PORTD |= (1 << 5);
	
	
   while(1){
	   for(int j = 0; j < 3; j++)
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	63 30       	cpi	r22, 0x03	; 3
 1a8:	71 05       	cpc	r23, r1
 1aa:	0c f4       	brge	.+2      	; 0x1ae <main+0xea>
 1ac:	a1 cf       	rjmp	.-190    	; 0xf0 <main+0x2c>
				_delay_us(7.28); //1400
			}
		}
			
	}
		PORTD &= ~(1 << 5);
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	8f 7d       	andi	r24, 0xDF	; 223
 1b2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	8f e3       	ldi	r24, 0x3F	; 63
 1b6:	92 e4       	ldi	r25, 0x42	; 66
 1b8:	2f e0       	ldi	r18, 0x0F	; 15
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0xf6>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x100>
 1c4:	00 00       	nop
 1c6:	91 cf       	rjmp	.-222    	; 0xea <main+0x26>

Disassembly of section .text.__dummy_fini:

000001e6 <_fini>:
 1e6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001e8 <__funcs_on_exit>:
 1e8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001ea <__simulator_exit>:
 1ea:	08 95       	ret

Disassembly of section .text.exit:

000001c8 <exit>:
 1c8:	ec 01       	movw	r28, r24
 1ca:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__funcs_on_exit>
 1ce:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_fini>
 1d2:	ce 01       	movw	r24, r28
 1d4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__simulator_exit>
 1d8:	ce 01       	movw	r24, r28
 1da:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Exit>

Disassembly of section .text._Exit:

000001e2 <_Exit>:
 1e2:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
