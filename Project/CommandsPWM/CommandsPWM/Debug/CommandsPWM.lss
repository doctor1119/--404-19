
CommandsPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000263  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000263  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a34  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070b  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  00001417  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000019e  0000019e  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setup   00000016  00000166  00000166  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.delay   0000001e  00000148  00000148  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.loop    00000080  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000000c  00000192  00000192  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .data.pwmState 00000001  00800106  000001ae  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .bss.tickCount 00000002  00800100  00800100  00000263  2**0
                  ALLOC
 20 .bss.dataIndex 00000002  00800102  00800102  00000263  2**0
                  ALLOC
 21 .data.data    00000002  00800104  000001ac  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .text.__dummy_fini 00000002  000001a6  000001a6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  000001a8  000001a8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  000001aa  000001aa  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  0000017c  0000017c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  000001a2  000001a2  00000256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   8:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  58:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  5c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  60:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  64:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	80 01       	movw	r16, r0
  6e:	04 01       	movw	r0, r8
  70:	07 00       	.word	0x0007	; ????
  72:	01 ac       	ldd	r0, Z+57	; 0x39

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  c0:	0c 94 be 00 	jmp	0x17c	; 0x17c <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

0000019e <__bad_interrupt>:
 19e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setup:

00000166 <setup>:
uint16_t tickCount = 0;
uint8_t pwmState = 1;

void setup() {
	// Set PWM_PIN as output
	DDRD |= (1 << PWM_PIN);
 166:	8a b1       	in	r24, 0x0a	; 10
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	8a b9       	out	0x0a, r24	; 10
	// Set Timer1 for PWM
	TCCR0A |= (1 << COM0B1) | (1 << WGM00);
 16c:	84 b5       	in	r24, 0x24	; 36
 16e:	81 62       	ori	r24, 0x21	; 33
 170:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);
 172:	85 b5       	in	r24, 0x25	; 37
 174:	82 60       	ori	r24, 0x02	; 2
 176:	85 bd       	out	0x25, r24	; 37
	OCR0B = 0;
 178:	18 bc       	out	0x28, r1	; 40
 17a:	08 95       	ret

Disassembly of section .text.delay:

00000148 <delay>:
}

void delay(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	08 c0       	rjmp	.+16     	; 0x15e <delay+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	e9 ef       	ldi	r30, 0xF9	; 249
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <delay+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <delay+0x10>
 158:	00 00       	nop
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	28 17       	cp	r18, r24
 160:	39 07       	cpc	r19, r25
 162:	a8 f3       	brcs	.-22     	; 0x14e <delay+0x6>
		_delay_ms(1);
	}
}
 164:	08 95       	ret

Disassembly of section .text.loop:

000000c8 <loop>:

void loop() {
	if(dataIndex >= ARRAY_SIZE) {
  c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dataIndex>
  cc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <dataIndex+0x1>
  d0:	89 2b       	or	r24, r25
  d2:	21 f0       	breq	.+8      	; 0xdc <loop+0x14>
		dataIndex = 0;
  d4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <dataIndex+0x1>
  d8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dataIndex>
	}

	if(pwmState) {
  dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pwmState>
  e0:	88 23       	and	r24, r24
  e2:	19 f0       	breq	.+6      	; 0xea <loop+0x22>
		OCR0B = 255; // High duty cycle
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	88 bd       	out	0x28, r24	; 40
  e8:	01 c0       	rjmp	.+2      	; 0xec <loop+0x24>
		} else {
		OCR0B = 0; // Low duty cycle
  ea:	18 bc       	out	0x28, r1	; 40
	}

	if(tickCount >= data[dataIndex]) {
  ec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dataIndex>
  f0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <dataIndex+0x1>
  f4:	f9 01       	movw	r30, r18
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	ec 5f       	subi	r30, 0xFC	; 252
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	40 81       	ld	r20, Z
 100:	51 81       	ldd	r21, Z+1	; 0x01
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10a:	84 17       	cp	r24, r20
 10c:	95 07       	cpc	r25, r21
 10e:	58 f0       	brcs	.+22     	; 0x126 <loop+0x5e>
		tickCount = 0;
 110:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 114:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		dataIndex++;
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <dataIndex+0x1>
 120:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <dataIndex>
 124:	0c c0       	rjmp	.+24     	; 0x13e <loop+0x76>
		} else {
		tickCount++;
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		pwmState = !pwmState;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <pwmState>
 136:	91 11       	cpse	r25, r1
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pwmState>
	}

	delay(TICK_DURATION);
 13e:	82 e8       	ldi	r24, 0x82	; 130
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 a4 00 	call	0x148	; 0x148 <delay>
 146:	08 95       	ret

Disassembly of section .text.main:

00000192 <main>:
}

int main() {
	setup();
 192:	0e 94 b3 00 	call	0x166	; 0x166 <setup>
	sei();
 196:	78 94       	sei

	while(1) {
		loop();
 198:	0e 94 64 00 	call	0xc8	; 0xc8 <__data_load_end>
 19c:	fd cf       	rjmp	.-6      	; 0x198 <main+0x6>

Disassembly of section .text.__dummy_fini:

000001a6 <_fini>:
 1a6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001a8 <__funcs_on_exit>:
 1a8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001aa <__simulator_exit>:
 1aa:	08 95       	ret

Disassembly of section .text.exit:

0000017c <exit>:
 17c:	ec 01       	movw	r28, r24
 17e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__funcs_on_exit>
 182:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_fini>
 186:	ce 01       	movw	r24, r28
 188:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__simulator_exit>
 18c:	ce 01       	movw	r24, r28
 18e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Exit>

Disassembly of section .text._Exit:

000001a2 <_Exit>:
 1a2:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
