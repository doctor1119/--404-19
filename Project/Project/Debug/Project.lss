
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001cd  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000001db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ddb  00000000  00000000  0000025b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000702  00000000  00000000  00001036  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cb  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000223  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001daa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000011a  0000011a  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000012  00000108  00000108  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_11 00000014  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_24 00000014  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.temp_sensor_init 00000002  00000122  00000122  00000196  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_18 00000014  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.uart_init 00000036  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  00000124  00000124  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  00000126  00000126  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  00000128  00000128  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  000000b6  000000b6  0000012a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  0000011e  0000011e  00000192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_11>
  30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  40:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_18>
  4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_24>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 84 00 	call	0x108	; 0x108 <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000011a <__bad_interrupt>:
 11a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000108 <main>:
#include <avr/io.h>


int main(void)
{
	temp_sensor_init();
 108:	0e 94 91 00 	call	0x122	; 0x122 <temp_sensor_init>
	uart_init(MyBaud);
 10c:	67 e6       	ldi	r22, 0x67	; 103
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x10>

Disassembly of section .text.__vector_11:

000000cc <__vector_11>:
#include <avr/interrupt.h>
#include <avr/io.h>


ISR(TIMER1_COMPA_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
	
}
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

Disassembly of section .text.__vector_24:

000000e0 <__vector_24>:


ISR(TWI_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
	
}
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

Disassembly of section .text.temp_sensor_init:

00000122 <temp_sensor_init>:


void temp_sensor_init()
{
 122:	08 95       	ret

Disassembly of section .text.__vector_18:

000000f4 <__vector_18>:
#include <avr/interrupt.h>
#include <avr/io.h>


ISR(USART_RX_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
	
}
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

Disassembly of section .text.uart_init:

00000080 <uart_init>:


void uart_init(unsigned int baud)
{
	UBRR0L = (unsigned int)baud;
  80:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = (unsigned int)(baud>>8);
  84:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0); // Receiver/Transmitter
  88:	e1 ec       	ldi	r30, 0xC1	; 193
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	88 61       	ori	r24, 0x18	; 24
  90:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0); // ISR(USART_RX_vect)
  92:	80 81       	ld	r24, Z
  94:	80 68       	ori	r24, 0x80	; 128
  96:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01); // 8 bit
  98:	e2 ec       	ldi	r30, 0xC2	; 194
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	86 60       	ori	r24, 0x06	; 6
  a0:	80 83       	st	Z, r24
	UCSR0C |= (1<<UMSEL00) | (1<<UMSEL01); // Asynchronous USART
  a2:	80 81       	ld	r24, Z
  a4:	80 6c       	ori	r24, 0xC0	; 192
  a6:	80 83       	st	Z, r24
	UCSR0C |= (1<<USBS0); // 1 stop-bit
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24
	SREG |= (1<<7); // Global Interrupt
  ae:	8f b7       	in	r24, 0x3f	; 63
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	8f bf       	out	0x3f, r24	; 63
  b4:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000124 <_fini>:
 124:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000126 <__funcs_on_exit>:
 126:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000128 <__simulator_exit>:
 128:	08 95       	ret

Disassembly of section .text.exit:

000000b6 <exit>:
  b6:	ec 01       	movw	r28, r24
  b8:	0e 94 93 00 	call	0x126	; 0x126 <__funcs_on_exit>
  bc:	0e 94 92 00 	call	0x124	; 0x124 <_fini>
  c0:	ce 01       	movw	r24, r28
  c2:	0e 94 94 00 	call	0x128	; 0x128 <__simulator_exit>
  c6:	ce 01       	movw	r24, r28
  c8:	0e 94 8f 00 	call	0x11e	; 0x11e <_Exit>

Disassembly of section .text._Exit:

0000011e <_Exit>:
 11e:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
