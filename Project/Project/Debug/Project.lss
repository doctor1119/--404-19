
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000083a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000083a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 000000b6  00000000  00000000  00000869  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000091f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af2  00000000  00000000  00000a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af8  00000000  00000000  00002531  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091c  00000000  00000000  00003029  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00003948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000267  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000708  00000000  00000000  00003e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000455f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000798  00000798  0000082c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004640  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.__vector_14 0000003a  0000059e  0000059e  00000632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.setupPWM 00000026  00000672  00000672  00000706  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.interrupt_count 00000002  00800101  00800101  0000083a  2**0
                  ALLOC
 18 .bss.interrupt_flag 00000002  00800103  00800103  0000083a  2**0
                  ALLOC
 19 .text.main    0000002a  00000648  00000648  000006dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.temp_sensor_init 0000003a  000005d8  000005d8  0000066c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.TWI_START 00000010  00000716  00000716  000007aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.TWI_SEND 00000014  00000702  00000702  00000796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.TWI_STOP 00000008  00000776  00000776  0000080a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.TWI_READ 0000001c  000006ba  000006ba  0000074e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.Write_to_USART 0000000e  00000726  00000726  000007ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.temp_sensor_read 0000006c  00000444  00000444  000004d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_11 0000004c  0000050e  0000050e  000005a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_18 000000a8  00000292  00000292  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.start_stop_allow 00000006  00000786  00000786  0000081a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.USART_Init 00000016  000006d6  000006d6  0000076a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.overwriting 00000036  00000612  00000612  000006a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.send    000000e8  000000d6  000000d6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.uart_read 00000006  0000078c  0000078c  00000820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .bss.start_stop 00000001  00800105  00800105  0000083a  2**0
                  ALLOC
 35 .bss.Data_to_share 00000001  00800106  00800106  0000083a  2**0
                  ALLOC
 36 .bss.rx_buffer_index 00000001  00800107  00800107  0000083a  2**0
                  ALLOC
 37 .text         0000005e  000004b0  000004b0  00000544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text         0000007a  000003ca  000003ca  0000045e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         00000044  0000055a  0000055a  000005ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         0000000e  00000734  00000734  000007c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         00000008  0000077e  0000077e  00000812  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         000000d4  000001be  000001be  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         0000000c  0000075e  0000075e  000007f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text         00000006  00000792  00000792  00000826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text         0000000e  00000742  00000742  000007d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text         0000000e  00000750  00000750  000007e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text         00000022  00000698  00000698  0000072c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.libgcc  0000000c  0000076a  0000076a  000007fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.__dummy_fini 00000002  000007a0  000007a0  00000834  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__dummy_funcs_on_exit 00000002  000007a2  000007a2  00000836  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.__dummy_simulator_exit 00000002  000007a4  000007a4  00000838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.exit    00000016  000006ec  000006ec  00000780  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.atoi    00000090  0000033a  0000033a  000003ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text._Exit   00000004  0000079c  0000079c  00000830  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
   8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
   c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  10:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  14:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  18:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  1c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  20:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  24:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  28:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  2c:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_11>
  30:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  34:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  38:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_14>
  3c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  40:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  44:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  48:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_18>
  4c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  50:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  54:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  58:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  5c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  60:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  64:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
  68:	8d 00       	.word	0x008d	; ????
  6a:	95 00       	.word	0x0095	; ????
  6c:	9d 00       	.word	0x009d	; ????
  6e:	a5 00       	.word	0x00a5	; ????
  70:	ad 00       	.word	0x00ad	; ????
  72:	b5 00       	.word	0x00b5	; ????
  74:	bd 00       	.word	0x00bd	; ????
  76:	c5 00       	.word	0x00c5	; ????
  78:	cd 00       	.word	0x00cd	; ????
  7a:	d5 00       	.word	0x00d5	; ????

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 08       	sbc	r0, r1
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 24 03 	call	0x648	; 0x648 <main>
  ce:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

00000798 <__bad_interrupt>:
 798:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_14:

0000059e <__vector_14>:
	interrupt_flag = 1;
}


void command(uint8_t temp)
{
 59e:	1f 92       	push	r1
 5a0:	0f 92       	push	r0
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	8f 93       	push	r24
 5aa:	9f 93       	push	r25
 5ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_end>
 5b0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_end+0x1>
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_end+0x1>
 5ba:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_end>
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <interrupt_flag+0x1>
 5c6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <interrupt_flag>
 5ca:	9f 91       	pop	r25
 5cc:	8f 91       	pop	r24
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

Disassembly of section .text.setupPWM:

00000672 <setupPWM>:
}	
	

void setupPWM() {
	
	TCCR0A = 0;
 672:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 674:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 676:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<WGM01) | (1<<WGM00);
 678:	84 b5       	in	r24, 0x24	; 36
 67a:	83 60       	ori	r24, 0x03	; 3
 67c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02) | (1<<CS01);
 67e:	85 b5       	in	r24, 0x25	; 37
 680:	8a 60       	ori	r24, 0x0A	; 10
 682:	85 bd       	out	0x25, r24	; 37
	OCR0A = MAXLEVEL;
 684:	84 e3       	ldi	r24, 0x34	; 52
 686:	87 bd       	out	0x27, r24	; 39
	OCR0B = MAXLEVEL/2;
 688:	8a e1       	ldi	r24, 0x1A	; 26
 68a:	88 bd       	out	0x28, r24	; 40
	TIMSK0 |= (1<<OCIE0A);
 68c:	ee e6       	ldi	r30, 0x6E	; 110
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	82 60       	ori	r24, 0x02	; 2
 694:	80 83       	st	Z, r24
 696:	08 95       	ret

Disassembly of section .text.main:

00000648 <main>:



int main(void)
{
	sei(); // Разрешаем глобальные прерывания
 648:	78 94       	sei
	USART_Init(UBRR_VALUE); //инициализация UART
 64a:	87 e6       	ldi	r24, 0x67	; 103
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <USART_Init>
	temp_sensor_init();//инициализация датчика температуры
 652:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <temp_sensor_init>
	uint8_t last_temperature = 0;
	setupPWM();
 656:	0e 94 39 03 	call	0x672	; 0x672 <setupPWM>
	
	while (1)
	{
		int t = uart_read();
 65a:	0e 94 c6 03 	call	0x78c	; 0x78c <uart_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 65e:	2f e7       	ldi	r18, 0x7F	; 127
 660:	84 e8       	ldi	r24, 0x84	; 132
 662:	9e e1       	ldi	r25, 0x1E	; 30
 664:	21 50       	subi	r18, 0x01	; 1
 666:	80 40       	sbci	r24, 0x00	; 0
 668:	90 40       	sbci	r25, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <main+0x1c>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <main+0x26>
 66e:	00 00       	nop
 670:	f4 cf       	rjmp	.-24     	; 0x65a <main+0x12>

Disassembly of section .text.temp_sensor_init:

000005d8 <temp_sensor_init>:
}

void TWI_WAIT(void) // Ожидание окончания предыдущей операции
{
	while(!(TWCR & (1<<TWINT)));
}
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
 5e0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 5e4:	8d ef       	ldi	r24, 0xFD	; 253
 5e6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 5ea:	84 e0       	ldi	r24, 0x04	; 4
 5ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5f0:	e1 e8       	ldi	r30, 0x81	; 129
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	8d 60       	ori	r24, 0x0D	; 13
 5f8:	80 83       	st	Z, r24
 5fa:	88 e0       	ldi	r24, 0x08	; 8
 5fc:	9d e3       	ldi	r25, 0x3D	; 61
 5fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 602:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 606:	ef e6       	ldi	r30, 0x6F	; 111
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	82 60       	ori	r24, 0x02	; 2
 60e:	80 83       	st	Z, r24
 610:	08 95       	ret

Disassembly of section .text.TWI_START:

00000716 <TWI_START>:

void TWI_START(void) // Начало общение с датчиком
{
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 716:	84 ea       	ldi	r24, 0xA4	; 164
 718:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)));
 71c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 720:	88 23       	and	r24, r24
 722:	e4 f7       	brge	.-8      	; 0x71c <TWI_START+0x6>
}
 724:	08 95       	ret

Disassembly of section .text.TWI_SEND:

00000702 <TWI_SEND>:
}

void TWI_WAIT(void) // Ожидание окончания предыдущей операции
{
	while(!(TWCR & (1<<TWINT)));
}
 702:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 706:	84 e8       	ldi	r24, 0x84	; 132
 708:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 70c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 710:	88 23       	and	r24, r24
 712:	e4 f7       	brge	.-8      	; 0x70c <TWI_SEND+0xa>
 714:	08 95       	ret

Disassembly of section .text.TWI_STOP:

00000776 <TWI_STOP>:
	while (!(TWCR & (1 << TWINT)));
}

void TWI_STOP(void) // Окончание работы с датчиком
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN); 
 776:	84 e9       	ldi	r24, 0x94	; 148
 778:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 77c:	08 95       	ret

Disassembly of section .text.TWI_READ:

000006ba <TWI_READ>:
}

void TWI_WAIT(void) // Ожидание окончания предыдущей операции
{
	while(!(TWCR & (1<<TWINT)));
}
 6ba:	20 e4       	ldi	r18, 0x40	; 64
 6bc:	82 9f       	mul	r24, r18
 6be:	c0 01       	movw	r24, r0
 6c0:	11 24       	eor	r1, r1
 6c2:	84 68       	ori	r24, 0x84	; 132
 6c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6cc:	88 23       	and	r24, r24
 6ce:	e4 f7       	brge	.-8      	; 0x6c8 <TWI_READ+0xe>
 6d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 6d4:	08 95       	ret

Disassembly of section .text.Write_to_USART:

00000726 <Write_to_USART>:
void Write_to_USART(float celsius_temperature) // Функция для перевода в целочисленное значение и отправки температуры, полученной с датчика, через ЮСАРТ на компьютер 
{
	
	celsius_temperature = celsius_temperature/1;
	uint8_t temp = 0;
	temp = (uint8_t)celsius_temperature;
 726:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__fixunssfsi>
	send(temp);
 72a:	86 2f       	mov	r24, r22
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
 732:	08 95       	ret

Disassembly of section .text.temp_sensor_read:

00000444 <temp_sensor_read>:
}

void TWI_WAIT(void) // Ожидание окончания предыдущей операции
{
	while(!(TWCR & (1<<TWINT)));
}
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 6b 00 	call	0xd6	; 0xd6 <_etext>
 450:	0e 94 8b 03 	call	0x716	; 0x716 <TWI_START>
 454:	81 e9       	ldi	r24, 0x91	; 145
 456:	0e 94 81 03 	call	0x702	; 0x702 <TWI_SEND>
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <TWI_READ>
 460:	c8 2f       	mov	r28, r24
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 5d 03 	call	0x6ba	; 0x6ba <TWI_READ>
 468:	d8 2f       	mov	r29, r24
 46a:	0e 94 bb 03 	call	0x776	; 0x776 <TWI_STOP>
 46e:	6c 2f       	mov	r22, r28
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	76 2f       	mov	r23, r22
 474:	66 27       	eor	r22, r22
 476:	6d 2b       	or	r22, r29
 478:	75 95       	asr	r23
 47a:	67 95       	ror	r22
 47c:	75 95       	asr	r23
 47e:	67 95       	ror	r22
 480:	75 95       	asr	r23
 482:	67 95       	ror	r22
 484:	75 95       	asr	r23
 486:	67 95       	ror	r22
 488:	75 95       	asr	r23
 48a:	67 95       	ror	r22
 48c:	77 27       	eor	r23, r23
 48e:	07 2e       	mov	r0, r23
 490:	00 0c       	add	r0, r0
 492:	88 0b       	sbc	r24, r24
 494:	99 0b       	sbc	r25, r25
 496:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__floatsisf>
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	5e e3       	ldi	r21, 0x3E	; 62
 4a2:	0e 94 bf 03 	call	0x77e	; 0x77e <__mulsf3>
 4a6:	0e 94 93 03 	call	0x726	; 0x726 <Write_to_USART>
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

Disassembly of section .text.__vector_11:

0000050e <__vector_11>:
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	4f 93       	push	r20
 51e:	5f 93       	push	r21
 520:	6f 93       	push	r22
 522:	7f 93       	push	r23
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
 528:	af 93       	push	r26
 52a:	bf 93       	push	r27
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
 530:	0e 94 c3 03 	call	0x786	; 0x786 <start_stop_allow>
 534:	0e 94 22 02 	call	0x444	; 0x444 <temp_sensor_read>
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

Disassembly of section .text.__vector_18:

00000292 <__vector_18>:
uint8_t Data_to_share = 0; //Температура, отправляемая в блок commands
uint8_t start_stop = 0; //Переменная для включения-выключения работы программы датчика температуры с компьютера (0 - выключена, 1 - включена)
uint8_t overwriting(uint8_t data);

ISR(USART_RX_vect)
{	
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	cf 93       	push	r28
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	char Data_s_t = UDR0; // Записываем данные, полученные с компьютера
 2b6:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			start_stop = 0;
		}
	}
	else // Если с компьютера приходит любое другое значение, расцениваем его, как температуру
	{*/
		uint8_t data = atoi(Data_s_t); // Переводим данные, полученные с компьютера, в численное значение
 2ba:	8c 2f       	mov	r24, r28
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 9d 01 	call	0x33a	; 0x33a <atoi>
		
		rx_buffer[rx_buffer_index] = (uint8_t)Data_s_t  + 1;
 2c2:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <rx_buffer_index>
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	cf 5f       	subi	r28, 0xFF	; 255
 2ca:	e0 50       	subi	r30, 0x00	; 0
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	c0 83       	st	Z, r28
		while (!(UCSR0A & (1<<UDRE0))); // Проверяем буфер перед отправкой
 2d0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2d4:	85 ff       	sbrs	r24, 5
 2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <__vector_18+0x3e>
		UDR0 = rx_buffer[rx_buffer_index];
 2d8:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <rx_buffer_index>
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	e0 50       	subi	r30, 0x00	; 0
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	80 81       	ld	r24, Z
 2e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
		if (rx_buffer_index == 1)
 2e8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rx_buffer_index>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	71 f4       	brne	.+28     	; 0x30c <__vector_18+0x7a>
		{			
			rx_buffer_index = 0;
 2f0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <rx_buffer_index>
			Data_to_share = rx_buffer[0]*10 + rx_buffer[1];
 2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_end>
 2fc:	88 0f       	add	r24, r24
 2fe:	28 2f       	mov	r18, r24
 300:	22 0f       	add	r18, r18
 302:	22 0f       	add	r18, r18
 304:	82 0f       	add	r24, r18
 306:	89 0f       	add	r24, r25
 308:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Data_to_share>
		}
		rx_buffer_index++;
 30c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rx_buffer_index>
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rx_buffer_index>
	//}
	
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	cf 91       	pop	r28
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

Disassembly of section .text.start_stop_allow:

00000786 <start_stop_allow>:

uint8_t start_stop_allow() // Функция для передачи значения start_stop в другие модули
{
	return start_stop;
}
 786:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <start_stop>
 78a:	08 95       	ret

Disassembly of section .text.USART_Init:

000006d6 <USART_Init>:

void USART_Init(unsigned int UBRR) // Функция инициализации ЮСАРТа
{
	// Устанавливаем скорость передачи
	UBRR0H = (unsigned char)(UBRR>>8);
 6d6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)UBRR;
 6da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // Разрешаем чтение, запись и прирывания для ЮСАРТа
 6de:	88 e9       	ldi	r24, 0x98	; 152
 6e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00); // 8 bit, 1 stopbit
 6e4:	8e e0       	ldi	r24, 0x0E	; 14
 6e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 6ea:	08 95       	ret

Disassembly of section .text.overwriting:

00000612 <overwriting>:
		}
	}
}

uint8_t overwriting(uint8_t data) // Функция, которая переписывает значение температуры 1234 -> 4321 
{
 612:	28 2f       	mov	r18, r24
	uint8_t newData = 0;
 614:	80 e0       	ldi	r24, 0x00	; 0
	while(data > 0)
 616:	15 c0       	rjmp	.+42     	; 0x642 <overwriting+0x30>
	{
		newData = newData*10 + (data % 10);
 618:	88 0f       	add	r24, r24
 61a:	98 2f       	mov	r25, r24
 61c:	99 0f       	add	r25, r25
 61e:	99 0f       	add	r25, r25
 620:	89 0f       	add	r24, r25
 622:	9d ec       	ldi	r25, 0xCD	; 205
 624:	29 9f       	mul	r18, r25
 626:	91 2d       	mov	r25, r1
 628:	11 24       	eor	r1, r1
 62a:	96 95       	lsr	r25
 62c:	96 95       	lsr	r25
 62e:	96 95       	lsr	r25
 630:	49 2f       	mov	r20, r25
 632:	44 0f       	add	r20, r20
 634:	34 2f       	mov	r19, r20
 636:	33 0f       	add	r19, r19
 638:	33 0f       	add	r19, r19
 63a:	34 0f       	add	r19, r20
 63c:	23 1b       	sub	r18, r19
 63e:	82 0f       	add	r24, r18
		data = data/10;
 640:	29 2f       	mov	r18, r25
}

uint8_t overwriting(uint8_t data) // Функция, которая переписывает значение температуры 1234 -> 4321 
{
	uint8_t newData = 0;
	while(data > 0)
 642:	21 11       	cpse	r18, r1
 644:	e9 cf       	rjmp	.-46     	; 0x618 <overwriting+0x6>
	{
		newData = newData*10 + (data % 10);
		data = data/10;
	}
	return newData;
}
 646:	08 95       	ret

Disassembly of section .text.send:

000000d6 <send>:
}

void send(uint8_t data) // Функция отправки данных по ЮСАРТ
{	
	data = fabs(data); // Берем модуль от значения температуры
	data = overwriting(data); //Переписываем значение температуры 1234 -> 4321. Так надо.
  d6:	0e 94 09 03 	call	0x612	; 0x612 <overwriting>
	uint8_t c; // В c будем записывать по очереди цифры из data для отправки через ЮСАРТ
	while(data > 0)
  da:	6e c0       	rjmp	.+220    	; 0x1b8 <send+0xe2>
	{
		c = 0;
		c += data%10; // Отделяем крайнюю правую цифру от переменной data и записываем ее в переменную с (не выводит 0. Сделать так, чтобы выводило)
  dc:	9d ec       	ldi	r25, 0xCD	; 205
  de:	89 9f       	mul	r24, r25
  e0:	91 2d       	mov	r25, r1
  e2:	11 24       	eor	r1, r1
  e4:	e9 2f       	mov	r30, r25
  e6:	e6 95       	lsr	r30
  e8:	e6 95       	lsr	r30
  ea:	e6 95       	lsr	r30
  ec:	4e 2f       	mov	r20, r30
  ee:	44 0f       	add	r20, r20
  f0:	e4 2f       	mov	r30, r20
  f2:	ee 0f       	add	r30, r30
  f4:	ee 0f       	add	r30, r30
  f6:	4e 0f       	add	r20, r30
  f8:	e8 2f       	mov	r30, r24
  fa:	e4 1b       	sub	r30, r20
		data = data/10; // Стираем крайнюю правую цифру из переменной дата
  fc:	89 2f       	mov	r24, r25
  fe:	86 95       	lsr	r24
 100:	86 95       	lsr	r24
 102:	86 95       	lsr	r24
		switch(c) // Рассматриваем значение с
 104:	4e 2f       	mov	r20, r30
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	4a 30       	cpi	r20, 0x0A	; 10
 10a:	51 05       	cpc	r21, r1
 10c:	08 f0       	brcs	.+2      	; 0x110 <send+0x3a>
 10e:	54 c0       	rjmp	.+168    	; 0x1b8 <send+0xe2>
 110:	fa 01       	movw	r30, r20
 112:	ec 5c       	subi	r30, 0xCC	; 204
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__tablejump2__>
		{
			case 0: // Если в с записан 0 
				while (!(UCSR0A & (1<<UDRE0))); // Проверяем буфер перед отправкой
 11a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11e:	95 ff       	sbrs	r25, 5
 120:	fc cf       	rjmp	.-8      	; 0x11a <send+0x44>
				UDR0 = '0'; //Записываем значение с в буфер для отправки
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 128:	47 c0       	rjmp	.+142    	; 0x1b8 <send+0xe2>
			case 1:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 12a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12e:	95 ff       	sbrs	r25, 5
 130:	fc cf       	rjmp	.-8      	; 0x12a <send+0x54>
				UDR0 = '1'; //Записываем значение с в буфер для отправки
 132:	91 e3       	ldi	r25, 0x31	; 49
 134:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 138:	3f c0       	rjmp	.+126    	; 0x1b8 <send+0xe2>
			case 2:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 13a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 13e:	95 ff       	sbrs	r25, 5
 140:	fc cf       	rjmp	.-8      	; 0x13a <send+0x64>
				UDR0 = '2'; //Записываем значение с в буфер для отправки
 142:	92 e3       	ldi	r25, 0x32	; 50
 144:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 148:	37 c0       	rjmp	.+110    	; 0x1b8 <send+0xe2>
			case 3:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 14a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14e:	95 ff       	sbrs	r25, 5
 150:	fc cf       	rjmp	.-8      	; 0x14a <send+0x74>
				UDR0 = '3'; //Записываем значение с в буфер для отправки
 152:	93 e3       	ldi	r25, 0x33	; 51
 154:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 158:	2f c0       	rjmp	.+94     	; 0x1b8 <send+0xe2>
			case 4:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 15a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15e:	95 ff       	sbrs	r25, 5
 160:	fc cf       	rjmp	.-8      	; 0x15a <send+0x84>
				UDR0 = '4';
 162:	94 e3       	ldi	r25, 0x34	; 52
 164:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 168:	27 c0       	rjmp	.+78     	; 0x1b8 <send+0xe2>
			case 5:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 16a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16e:	95 ff       	sbrs	r25, 5
 170:	fc cf       	rjmp	.-8      	; 0x16a <send+0x94>
				UDR0 = '5'; //Записываем значение с в буфер для отправки
 172:	95 e3       	ldi	r25, 0x35	; 53
 174:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 178:	1f c0       	rjmp	.+62     	; 0x1b8 <send+0xe2>
			case 6:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 17a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 17e:	95 ff       	sbrs	r25, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <send+0xa4>
				UDR0 = '6'; //Записываем значение с в буфер для отправки
 182:	96 e3       	ldi	r25, 0x36	; 54
 184:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 188:	17 c0       	rjmp	.+46     	; 0x1b8 <send+0xe2>
			case 7:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 18a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 18e:	95 ff       	sbrs	r25, 5
 190:	fc cf       	rjmp	.-8      	; 0x18a <send+0xb4>
				UDR0 = '7'; //Записываем значение с в буфер для отправки
 192:	97 e3       	ldi	r25, 0x37	; 55
 194:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 198:	0f c0       	rjmp	.+30     	; 0x1b8 <send+0xe2>
			case 8:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 19a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 19e:	95 ff       	sbrs	r25, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <send+0xc4>
				UDR0 = '8'; //Записываем значение с в буфер для отправки
 1a2:	98 e3       	ldi	r25, 0x38	; 56
 1a4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <send+0xe2>
			case 9:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 1aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ae:	95 ff       	sbrs	r25, 5
 1b0:	fc cf       	rjmp	.-8      	; 0x1aa <send+0xd4>
				UDR0 = '9'; //Записываем значение с в буфер для отправки
 1b2:	99 e3       	ldi	r25, 0x39	; 57
 1b4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
void send(uint8_t data) // Функция отправки данных по ЮСАРТ
{	
	data = fabs(data); // Берем модуль от значения температуры
	data = overwriting(data); //Переписываем значение температуры 1234 -> 4321. Так надо.
	uint8_t c; // В c будем записывать по очереди цифры из data для отправки через ЮСАРТ
	while(data > 0)
 1b8:	81 11       	cpse	r24, r1
 1ba:	90 cf       	rjmp	.-224    	; 0xdc <send+0x6>
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
				UDR0 = '9'; //Записываем значение с в буфер для отправки
				break;
		}
	}
}
 1bc:	08 95       	ret

Disassembly of section .text.uart_read:

0000078c <uart_read>:
uint8_t uart_read(void)
{
	//Data_to_share = rx_buffer[0]*10 + rx_buffer[1]; // записываем значение полученной с компьютера температуры в целочисленную переменную для отправки в блок commands

	return Data_to_share;
}
 78c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Data_to_share>
 790:	08 95       	ret

Disassembly of section .text:

000004b0 <__fixunssfsi>:
 4b0:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_splitA>
 4b4:	88 f0       	brcs	.+34     	; 0x4d8 <__fixunssfsi+0x28>
 4b6:	9f 57       	subi	r25, 0x7F	; 127
 4b8:	98 f0       	brcs	.+38     	; 0x4e0 <__fixunssfsi+0x30>
 4ba:	b9 2f       	mov	r27, r25
 4bc:	99 27       	eor	r25, r25
 4be:	b7 51       	subi	r27, 0x17	; 23
 4c0:	b0 f0       	brcs	.+44     	; 0x4ee <__fixunssfsi+0x3e>
 4c2:	e1 f0       	breq	.+56     	; 0x4fc <__fixunssfsi+0x4c>
 4c4:	66 0f       	add	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	1a f0       	brmi	.+6      	; 0x4d4 <__fixunssfsi+0x24>
 4ce:	ba 95       	dec	r27
 4d0:	c9 f7       	brne	.-14     	; 0x4c4 <__fixunssfsi+0x14>
 4d2:	14 c0       	rjmp	.+40     	; 0x4fc <__fixunssfsi+0x4c>
 4d4:	b1 30       	cpi	r27, 0x01	; 1
 4d6:	91 f0       	breq	.+36     	; 0x4fc <__fixunssfsi+0x4c>
 4d8:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_zero>
 4dc:	b1 e0       	ldi	r27, 0x01	; 1
 4de:	08 95       	ret
 4e0:	0c 94 9a 03 	jmp	0x734	; 0x734 <__fp_zero>
 4e4:	67 2f       	mov	r22, r23
 4e6:	78 2f       	mov	r23, r24
 4e8:	88 27       	eor	r24, r24
 4ea:	b8 5f       	subi	r27, 0xF8	; 248
 4ec:	39 f0       	breq	.+14     	; 0x4fc <__fixunssfsi+0x4c>
 4ee:	b9 3f       	cpi	r27, 0xF9	; 249
 4f0:	cc f3       	brlt	.-14     	; 0x4e4 <__fixunssfsi+0x34>
 4f2:	86 95       	lsr	r24
 4f4:	77 95       	ror	r23
 4f6:	67 95       	ror	r22
 4f8:	b3 95       	inc	r27
 4fa:	d9 f7       	brne	.-10     	; 0x4f2 <__fixunssfsi+0x42>
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__fixunssfsi+0x5c>
 4fe:	90 95       	com	r25
 500:	80 95       	com	r24
 502:	70 95       	com	r23
 504:	61 95       	neg	r22
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	08 95       	ret

Disassembly of section .text:

000003ca <__floatunsisf>:
 3ca:	e8 94       	clt
 3cc:	09 c0       	rjmp	.+18     	; 0x3e0 <__floatsisf+0x12>

000003ce <__floatsisf>:
 3ce:	97 fb       	bst	r25, 7
 3d0:	3e f4       	brtc	.+14     	; 0x3e0 <__floatsisf+0x12>
 3d2:	90 95       	com	r25
 3d4:	80 95       	com	r24
 3d6:	70 95       	com	r23
 3d8:	61 95       	neg	r22
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f 4f       	sbci	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	99 23       	and	r25, r25
 3e2:	a9 f0       	breq	.+42     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3e4:	f9 2f       	mov	r31, r25
 3e6:	96 e9       	ldi	r25, 0x96	; 150
 3e8:	bb 27       	eor	r27, r27
 3ea:	93 95       	inc	r25
 3ec:	f6 95       	lsr	r31
 3ee:	87 95       	ror	r24
 3f0:	77 95       	ror	r23
 3f2:	67 95       	ror	r22
 3f4:	b7 95       	ror	r27
 3f6:	f1 11       	cpse	r31, r1
 3f8:	f8 cf       	rjmp	.-16     	; 0x3ea <__floatsisf+0x1c>
 3fa:	fa f4       	brpl	.+62     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 3fc:	bb 0f       	add	r27, r27
 3fe:	11 f4       	brne	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	60 ff       	sbrs	r22, 0
 402:	1b c0       	rjmp	.+54     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 404:	6f 5f       	subi	r22, 0xFF	; 255
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	8f 4f       	sbci	r24, 0xFF	; 255
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	16 c0       	rjmp	.+44     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 40e:	88 23       	and	r24, r24
 410:	11 f0       	breq	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	96 e9       	ldi	r25, 0x96	; 150
 414:	11 c0       	rjmp	.+34     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 416:	77 23       	and	r23, r23
 418:	21 f0       	breq	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41a:	9e e8       	ldi	r25, 0x8E	; 142
 41c:	87 2f       	mov	r24, r23
 41e:	76 2f       	mov	r23, r22
 420:	05 c0       	rjmp	.+10     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 422:	66 23       	and	r22, r22
 424:	71 f0       	breq	.+28     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 426:	96 e8       	ldi	r25, 0x86	; 134
 428:	86 2f       	mov	r24, r22
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	2a f0       	brmi	.+10     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 430:	9a 95       	dec	r25
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	88 1f       	adc	r24, r24
 438:	da f7       	brpl	.-10     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 43a:	88 0f       	add	r24, r24
 43c:	96 95       	lsr	r25
 43e:	87 95       	ror	r24
 440:	97 f9       	bld	r25, 7
 442:	08 95       	ret

Disassembly of section .text:

0000055a <__fp_split3>:
 55a:	57 fd       	sbrc	r21, 7
 55c:	90 58       	subi	r25, 0x80	; 128
 55e:	44 0f       	add	r20, r20
 560:	55 1f       	adc	r21, r21
 562:	59 f0       	breq	.+22     	; 0x57a <__fp_splitA+0x10>
 564:	5f 3f       	cpi	r21, 0xFF	; 255
 566:	71 f0       	breq	.+28     	; 0x584 <__fp_splitA+0x1a>
 568:	47 95       	ror	r20

0000056a <__fp_splitA>:
 56a:	88 0f       	add	r24, r24
 56c:	97 fb       	bst	r25, 7
 56e:	99 1f       	adc	r25, r25
 570:	61 f0       	breq	.+24     	; 0x58a <__fp_splitA+0x20>
 572:	9f 3f       	cpi	r25, 0xFF	; 255
 574:	79 f0       	breq	.+30     	; 0x594 <__fp_splitA+0x2a>
 576:	87 95       	ror	r24
 578:	08 95       	ret
 57a:	12 16       	cp	r1, r18
 57c:	13 06       	cpc	r1, r19
 57e:	14 06       	cpc	r1, r20
 580:	55 1f       	adc	r21, r21
 582:	f2 cf       	rjmp	.-28     	; 0x568 <__fp_split3+0xe>
 584:	46 95       	lsr	r20
 586:	f1 df       	rcall	.-30     	; 0x56a <__fp_splitA>
 588:	08 c0       	rjmp	.+16     	; 0x59a <__fp_splitA+0x30>
 58a:	16 16       	cp	r1, r22
 58c:	17 06       	cpc	r1, r23
 58e:	18 06       	cpc	r1, r24
 590:	99 1f       	adc	r25, r25
 592:	f1 cf       	rjmp	.-30     	; 0x576 <__fp_splitA+0xc>
 594:	86 95       	lsr	r24
 596:	71 05       	cpc	r23, r1
 598:	61 05       	cpc	r22, r1
 59a:	08 94       	sec
 59c:	08 95       	ret

Disassembly of section .text:

00000734 <__fp_zero>:
 734:	e8 94       	clt

00000736 <__fp_szero>:
 736:	bb 27       	eor	r27, r27
 738:	66 27       	eor	r22, r22
 73a:	77 27       	eor	r23, r23
 73c:	cb 01       	movw	r24, r22
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret

Disassembly of section .text:

0000077e <__mulsf3>:
 77e:	0e 94 df 00 	call	0x1be	; 0x1be <__mulsf3x>
 782:	0c 94 4c 03 	jmp	0x698	; 0x698 <__fp_round>

Disassembly of section .text:

000001be <__mulsf3x>:
 1be:	0f c0       	rjmp	.+30     	; 0x1de <__mulsf3x+0x20>
 1c0:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_pscA>
 1c4:	38 f0       	brcs	.+14     	; 0x1d4 <__mulsf3x+0x16>
 1c6:	0e 94 a8 03 	call	0x750	; 0x750 <__fp_pscB>
 1ca:	20 f0       	brcs	.+8      	; 0x1d4 <__mulsf3x+0x16>
 1cc:	95 23       	and	r25, r21
 1ce:	11 f0       	breq	.+4      	; 0x1d4 <__mulsf3x+0x16>
 1d0:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>
 1d4:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_nan>
 1d8:	11 24       	eor	r1, r1
 1da:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 1de:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_split3>
 1e2:	70 f3       	brcs	.-36     	; 0x1c0 <__mulsf3x+0x2>

000001e4 <__mulsf3_pse>:
 1e4:	95 9f       	mul	r25, r21
 1e6:	c1 f3       	breq	.-16     	; 0x1d8 <__mulsf3x+0x1a>
 1e8:	95 0f       	add	r25, r21
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	55 1f       	adc	r21, r21
 1ee:	62 9f       	mul	r22, r18
 1f0:	f0 01       	movw	r30, r0
 1f2:	72 9f       	mul	r23, r18
 1f4:	bb 27       	eor	r27, r27
 1f6:	f0 0d       	add	r31, r0
 1f8:	b1 1d       	adc	r27, r1
 1fa:	63 9f       	mul	r22, r19
 1fc:	aa 27       	eor	r26, r26
 1fe:	f0 0d       	add	r31, r0
 200:	b1 1d       	adc	r27, r1
 202:	aa 1f       	adc	r26, r26
 204:	64 9f       	mul	r22, r20
 206:	66 27       	eor	r22, r22
 208:	b0 0d       	add	r27, r0
 20a:	a1 1d       	adc	r26, r1
 20c:	66 1f       	adc	r22, r22
 20e:	82 9f       	mul	r24, r18
 210:	22 27       	eor	r18, r18
 212:	b0 0d       	add	r27, r0
 214:	a1 1d       	adc	r26, r1
 216:	62 1f       	adc	r22, r18
 218:	73 9f       	mul	r23, r19
 21a:	b0 0d       	add	r27, r0
 21c:	a1 1d       	adc	r26, r1
 21e:	62 1f       	adc	r22, r18
 220:	83 9f       	mul	r24, r19
 222:	a0 0d       	add	r26, r0
 224:	61 1d       	adc	r22, r1
 226:	22 1f       	adc	r18, r18
 228:	74 9f       	mul	r23, r20
 22a:	33 27       	eor	r19, r19
 22c:	a0 0d       	add	r26, r0
 22e:	61 1d       	adc	r22, r1
 230:	23 1f       	adc	r18, r19
 232:	84 9f       	mul	r24, r20
 234:	60 0d       	add	r22, r0
 236:	21 1d       	adc	r18, r1
 238:	82 2f       	mov	r24, r18
 23a:	76 2f       	mov	r23, r22
 23c:	6a 2f       	mov	r22, r26
 23e:	11 24       	eor	r1, r1
 240:	9f 57       	subi	r25, 0x7F	; 127
 242:	50 40       	sbci	r21, 0x00	; 0
 244:	9a f0       	brmi	.+38     	; 0x26c <__mulsf3_pse+0x88>
 246:	f1 f0       	breq	.+60     	; 0x284 <__mulsf3_pse+0xa0>
 248:	88 23       	and	r24, r24
 24a:	4a f0       	brmi	.+18     	; 0x25e <__mulsf3_pse+0x7a>
 24c:	ee 0f       	add	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	bb 1f       	adc	r27, r27
 252:	66 1f       	adc	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	88 1f       	adc	r24, r24
 258:	91 50       	subi	r25, 0x01	; 1
 25a:	50 40       	sbci	r21, 0x00	; 0
 25c:	a9 f7       	brne	.-22     	; 0x248 <__mulsf3_pse+0x64>
 25e:	9e 3f       	cpi	r25, 0xFE	; 254
 260:	51 05       	cpc	r21, r1
 262:	80 f0       	brcs	.+32     	; 0x284 <__mulsf3_pse+0xa0>
 264:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_inf>
 268:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_szero>
 26c:	5f 3f       	cpi	r21, 0xFF	; 255
 26e:	e4 f3       	brlt	.-8      	; 0x268 <__mulsf3_pse+0x84>
 270:	98 3e       	cpi	r25, 0xE8	; 232
 272:	d4 f3       	brlt	.-12     	; 0x268 <__mulsf3_pse+0x84>
 274:	86 95       	lsr	r24
 276:	77 95       	ror	r23
 278:	67 95       	ror	r22
 27a:	b7 95       	ror	r27
 27c:	f7 95       	ror	r31
 27e:	e7 95       	ror	r30
 280:	9f 5f       	subi	r25, 0xFF	; 255
 282:	c1 f7       	brne	.-16     	; 0x274 <__mulsf3_pse+0x90>
 284:	fe 2b       	or	r31, r30
 286:	88 0f       	add	r24, r24
 288:	91 1d       	adc	r25, r1
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	97 f9       	bld	r25, 7
 290:	08 95       	ret

Disassembly of section .text:

0000075e <__fp_inf>:
 75e:	97 f9       	bld	r25, 7
 760:	9f 67       	ori	r25, 0x7F	; 127
 762:	80 e8       	ldi	r24, 0x80	; 128
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	08 95       	ret

Disassembly of section .text:

00000792 <__fp_nan>:
 792:	9f ef       	ldi	r25, 0xFF	; 255
 794:	80 ec       	ldi	r24, 0xC0	; 192
 796:	08 95       	ret

Disassembly of section .text:

00000742 <__fp_pscA>:
 742:	00 24       	eor	r0, r0
 744:	0a 94       	dec	r0
 746:	16 16       	cp	r1, r22
 748:	17 06       	cpc	r1, r23
 74a:	18 06       	cpc	r1, r24
 74c:	09 06       	cpc	r0, r25
 74e:	08 95       	ret

Disassembly of section .text:

00000750 <__fp_pscB>:
 750:	00 24       	eor	r0, r0
 752:	0a 94       	dec	r0
 754:	12 16       	cp	r1, r18
 756:	13 06       	cpc	r1, r19
 758:	14 06       	cpc	r1, r20
 75a:	05 06       	cpc	r0, r21
 75c:	08 95       	ret

Disassembly of section .text:

00000698 <__fp_round>:
 698:	09 2e       	mov	r0, r25
 69a:	03 94       	inc	r0
 69c:	00 0c       	add	r0, r0
 69e:	11 f4       	brne	.+4      	; 0x6a4 <__fp_round+0xc>
 6a0:	88 23       	and	r24, r24
 6a2:	52 f0       	brmi	.+20     	; 0x6b8 <__fp_round+0x20>
 6a4:	bb 0f       	add	r27, r27
 6a6:	40 f4       	brcc	.+16     	; 0x6b8 <__fp_round+0x20>
 6a8:	bf 2b       	or	r27, r31
 6aa:	11 f4       	brne	.+4      	; 0x6b0 <__fp_round+0x18>
 6ac:	60 ff       	sbrs	r22, 0
 6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <__fp_round+0x20>
 6b0:	6f 5f       	subi	r22, 0xFF	; 255
 6b2:	7f 4f       	sbci	r23, 0xFF	; 255
 6b4:	8f 4f       	sbci	r24, 0xFF	; 255
 6b6:	9f 4f       	sbci	r25, 0xFF	; 255
 6b8:	08 95       	ret

Disassembly of section .text.libgcc:

0000076a <__tablejump2__>:
 76a:	ee 0f       	add	r30, r30
 76c:	ff 1f       	adc	r31, r31
 76e:	05 90       	lpm	r0, Z+
 770:	f4 91       	lpm	r31, Z
 772:	e0 2d       	mov	r30, r0
 774:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000007a0 <_fini>:
 7a0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000007a2 <__funcs_on_exit>:
 7a2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000007a4 <__simulator_exit>:
 7a4:	08 95       	ret

Disassembly of section .text.exit:

000006ec <exit>:
 6ec:	ec 01       	movw	r28, r24
 6ee:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__funcs_on_exit>
 6f2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <_fini>
 6f6:	ce 01       	movw	r24, r28
 6f8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__simulator_exit>
 6fc:	ce 01       	movw	r24, r28
 6fe:	0e 94 ce 03 	call	0x79c	; 0x79c <_Exit>

Disassembly of section .text.atoi:

0000033a <atoi>:
 33a:	cf 93       	push	r28
 33c:	9b 01       	movw	r18, r22
 33e:	48 2f       	mov	r20, r24
 340:	f9 01       	movw	r30, r18
 342:	84 91       	lpm	r24, Z
 344:	47 fd       	sbrc	r20, 7
 346:	80 81       	ld	r24, Z
 348:	80 32       	cpi	r24, 0x20	; 32
 34a:	c9 f1       	breq	.+114    	; 0x3be <atoi+0x84>
 34c:	68 2f       	mov	r22, r24
 34e:	08 2e       	mov	r0, r24
 350:	00 0c       	add	r0, r0
 352:	77 0b       	sbc	r23, r23
 354:	69 50       	subi	r22, 0x09	; 9
 356:	71 09       	sbc	r23, r1
 358:	65 30       	cpi	r22, 0x05	; 5
 35a:	71 05       	cpc	r23, r1
 35c:	80 f1       	brcs	.+96     	; 0x3be <atoi+0x84>
 35e:	8b 32       	cpi	r24, 0x2B	; 43
 360:	49 f5       	brne	.+82     	; 0x3b4 <atoi+0x7a>
 362:	a0 e0       	ldi	r26, 0x00	; 0
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	2f 5f       	subi	r18, 0xFF	; 255
 368:	3f 4f       	sbci	r19, 0xFF	; 255
 36a:	4f 4f       	sbci	r20, 0xFF	; 255
 36c:	02 c0       	rjmp	.+4      	; 0x372 <atoi+0x38>
 36e:	a0 e0       	ldi	r26, 0x00	; 0
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	ca e0       	ldi	r28, 0x0A	; 10
 378:	f9 01       	movw	r30, r18
 37a:	64 91       	lpm	r22, Z
 37c:	47 fd       	sbrc	r20, 7
 37e:	60 81       	ld	r22, Z
 380:	06 2e       	mov	r0, r22
 382:	00 0c       	add	r0, r0
 384:	77 0b       	sbc	r23, r23
 386:	60 53       	subi	r22, 0x30	; 48
 388:	71 09       	sbc	r23, r1
 38a:	6a 30       	cpi	r22, 0x0A	; 10
 38c:	71 05       	cpc	r23, r1
 38e:	60 f4       	brcc	.+24     	; 0x3a8 <atoi+0x6e>
 390:	c8 9f       	mul	r28, r24
 392:	f0 01       	movw	r30, r0
 394:	c9 9f       	mul	r28, r25
 396:	f0 0d       	add	r31, r0
 398:	11 24       	eor	r1, r1
 39a:	2f 5f       	subi	r18, 0xFF	; 255
 39c:	3f 4f       	sbci	r19, 0xFF	; 255
 39e:	4f 4f       	sbci	r20, 0xFF	; 255
 3a0:	cf 01       	movw	r24, r30
 3a2:	86 1b       	sub	r24, r22
 3a4:	97 0b       	sbc	r25, r23
 3a6:	e8 cf       	rjmp	.-48     	; 0x378 <atoi+0x3e>
 3a8:	ab 2b       	or	r26, r27
 3aa:	69 f4       	brne	.+26     	; 0x3c6 <atoi+0x8c>
 3ac:	91 95       	neg	r25
 3ae:	81 95       	neg	r24
 3b0:	91 09       	sbc	r25, r1
 3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <atoi+0x8c>
 3b4:	8d 32       	cpi	r24, 0x2D	; 45
 3b6:	d9 f6       	brne	.-74     	; 0x36e <atoi+0x34>
 3b8:	a1 e0       	ldi	r26, 0x01	; 1
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	d4 cf       	rjmp	.-88     	; 0x366 <atoi+0x2c>
 3be:	2f 5f       	subi	r18, 0xFF	; 255
 3c0:	3f 4f       	sbci	r19, 0xFF	; 255
 3c2:	4f 4f       	sbci	r20, 0xFF	; 255
 3c4:	bd cf       	rjmp	.-134    	; 0x340 <atoi+0x6>
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

Disassembly of section .text._Exit:

0000079c <_Exit>:
 79c:	0e 94 69 00 	call	0xd2	; 0xd2 <_exit>
