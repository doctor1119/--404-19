
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000075a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000075a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 000000b6  00000000  00000000  00000789  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000083f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a4  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000916  00000000  00000000  00001ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000733  00000000  00000000  000027e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00002f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000253  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b9  00000000  00000000  00003353  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000370c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000006b6  000006b6  0000074a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000037bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.command 00000002  000006be  000006be  00000752  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000003e  000004fe  000004fe  00000592  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.temp_sensor_init 0000002c  00000572  00000572  00000606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TWI_WAIT 0000000a  00000688  00000688  0000071c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.TWI_START 00000008  00000692  00000692  00000726  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.TWI_SEND 0000000c  00000658  00000658  000006ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.TWI_STOP 00000008  0000069a  0000069a  0000072e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.TWI_READ_ACK 00000010  0000061e  0000061e  000006b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.TWI_READ_NACK 00000018  000005da  000005da  0000066e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.Write_to_USART 0000000c  00000664  00000664  000006f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.temp_sensor_read 00000098  00000292  00000292  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_11 00000050  0000046a  0000046a  000004fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .bss.current_temp 00000004  00800105  00800105  0000075a  2**0
                  ALLOC
 28 .text.__vector_18 00000068  000003a4  000003a4  00000438  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.start_stop_allow 00000006  000006aa  000006aa  0000073e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.USART_Init 00000016  000005f2  000005f2  00000686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.overwriting 00000036  0000053c  0000053c  000005d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.send    000000e8  000000d6  000000d6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.uart_read 0000001a  000005c0  000005c0  00000654  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .bss.start_stop 00000001  00800109  00800109  0000075a  2**0
                  ALLOC
 35 .bss.Data_to_share 00000001  0080010a  0080010a  0000075a  2**0
                  ALLOC
 36 .bss.rx_buffer_index 00000001  0080010b  0080010b  0000075a  2**0
                  ALLOC
 37 .text         0000005e  0000040c  0000040c  000004a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text         0000007a  0000032a  0000032a  000003be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         00000044  000004ba  000004ba  0000054e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         0000000e  0000062e  0000062e  000006c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         00000008  000006a2  000006a2  00000736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         000000d4  000001be  000001be  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         0000000c  00000670  00000670  00000704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text         00000006  000006b0  000006b0  00000744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text         0000000e  0000063c  0000063c  000006d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text         0000000e  0000064a  0000064a  000006de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text         00000022  0000059e  0000059e  00000632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.libgcc  0000000c  0000067c  0000067c  00000710  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.__dummy_fini 00000002  000006c0  000006c0  00000754  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__dummy_funcs_on_exit 00000002  000006c2  000006c2  00000756  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.__dummy_simulator_exit 00000002  000006c4  000006c4  00000758  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.exit    00000016  00000608  00000608  0000069c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text._Exit   00000004  000006ba  000006ba  0000074e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
   8:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
   c:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  10:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  14:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  18:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  1c:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  20:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  24:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  28:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  2c:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_11>
  30:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  34:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  38:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  3c:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  40:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  44:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  48:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_18>
  4c:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  50:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  54:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  58:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  5c:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  60:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  64:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__bad_interrupt>
  68:	8d 00       	.word	0x008d	; ????
  6a:	95 00       	.word	0x0095	; ????
  6c:	9d 00       	.word	0x009d	; ????
  6e:	a5 00       	.word	0x00a5	; ????
  70:	ad 00       	.word	0x00ad	; ????
  72:	b5 00       	.word	0x00b5	; ????
  74:	bd 00       	.word	0x00bd	; ????
  76:	c5 00       	.word	0x00c5	; ????
  78:	cd 00       	.word	0x00cd	; ????
  7a:	d5 00       	.word	0x00d5	; ????

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 0c       	add	r0, r1
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 7f 02 	call	0x4fe	; 0x4fe <main>
  ce:	0c 94 04 03 	jmp	0x608	; 0x608 <exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

000006b6 <__bad_interrupt>:
 6b6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.command:

000006be <command>:
﻿#include <xc.h>
#include "save.h"

void command(uint8_t temperature)
{
 6be:	08 95       	ret

Disassembly of section .text.main:

000004fe <main>:



int main(void)
{
	DDRC &= ~((1<<4) | (1<<5)); //Установка пинов PC5 и PC4 на прием информации с датчика температуры (для интерфейса I2C)
 4fe:	87 b1       	in	r24, 0x07	; 7
 500:	8f 7c       	andi	r24, 0xCF	; 207
 502:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<4) | (1<<5); // Убираем напряжение с пинов PC4 и PC5
 504:	88 b1       	in	r24, 0x08	; 8
 506:	80 63       	ori	r24, 0x30	; 48
 508:	88 b9       	out	0x08, r24	; 8
	SREG |=(1<<7); // Разрешаем глобальные прерывания
 50a:	8f b7       	in	r24, 0x3f	; 63
 50c:	80 68       	ori	r24, 0x80	; 128
 50e:	8f bf       	out	0x3f, r24	; 63
	USART_Init(UBRR_VALUE); //инициализация UART
 510:	83 e3       	ldi	r24, 0x33	; 51
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <USART_Init>
	temp_sensor_init();//инициализация датчика температуры
 518:	0e 94 b9 02 	call	0x572	; 0x572 <temp_sensor_init>
	DDRD |= (1<<1);// Установка PD1 как пин для выхода ИК диода	
 51c:	8a b1       	in	r24, 0x0a	; 10
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << 1); // Убираем напряжение с PD1
 522:	8b b1       	in	r24, 0x0b	; 11
 524:	8d 7f       	andi	r24, 0xFD	; 253
 526:	8b b9       	out	0x0b, r24	; 11
	uint8_t last_temperature = 0;
 528:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		
		
		uint8_t temp_to_command = uart_read(); // Записываем значение температуры, полученное с компьютера, в переменную temp_to_command
 52a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <uart_read>
 52e:	c8 2f       	mov	r28, r24
		if(last_temperature != temp_to_command) // Если температура, получаемая с компьютера, изменилась
 530:	d8 17       	cp	r29, r24
 532:	d9 f3       	breq	.-10     	; 0x52a <main+0x2c>
		{
		command(temp_to_command); // Отправляем значение полученной с компьютера температуры в блок commands
 534:	0e 94 5f 03 	call	0x6be	; 0x6be <command>
		last_temperature = temp_to_command;
 538:	dc 2f       	mov	r29, r28
 53a:	f7 cf       	rjmp	.-18     	; 0x52a <main+0x2c>

Disassembly of section .text.temp_sensor_init:

00000572 <temp_sensor_init>:
float current_temp = 0; // Значение температуры

void temp_sensor_init(void) // Функция инициализации датчика температуры и установки таймера
{
	// Инициализация датчика температуры
	TWSR = 0;
 572:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = ((F_CPU / F_SCL) - 16) / 2;
 576:	80 e2       	ldi	r24, 0x20	; 32
 578:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	// Установка прерывания по таймеру раз в секунду
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
 57c:	e1 e8       	ldi	r30, 0x81	; 129
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	8d 60       	ori	r24, 0x0D	; 13
 584:	80 83       	st	Z, r24
	OCR1A = 15624;
 586:	88 e0       	ldi	r24, 0x08	; 8
 588:	9d e3       	ldi	r25, 0x3D	; 61
 58a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 58e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A);
 592:	ef e6       	ldi	r30, 0x6F	; 111
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	82 60       	ori	r24, 0x02	; 2
 59a:	80 83       	st	Z, r24
 59c:	08 95       	ret

Disassembly of section .text.TWI_WAIT:

00000688 <TWI_WAIT>:
}

void TWI_WAIT(void) // Ожидание окончания предыдущей операции
{
	while(!(TWCR & (1<<TWINT)));
 688:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 68c:	88 23       	and	r24, r24
 68e:	e4 f7       	brge	.-8      	; 0x688 <TWI_WAIT>
}
 690:	08 95       	ret

Disassembly of section .text.TWI_START:

00000692 <TWI_START>:

void TWI_START(void) // Начало общение с датчиком
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 692:	84 ea       	ldi	r24, 0xA4	; 164
 694:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 698:	08 95       	ret

Disassembly of section .text.TWI_SEND:

00000658 <TWI_SEND>:
}

void TWI_SEND(unsigned char Data) // Отправка информации на датчик 
{
	TWDR = Data;
 658:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 65c:	84 e8       	ldi	r24, 0x84	; 132
 65e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 662:	08 95       	ret

Disassembly of section .text.TWI_STOP:

0000069a <TWI_STOP>:
}

void TWI_STOP(void) // Окончание работы с датчиком
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 69a:	84 e9       	ldi	r24, 0x94	; 148
 69c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6a0:	08 95       	ret

Disassembly of section .text.TWI_READ_ACK:

0000061e <TWI_READ_ACK>:
}

uint8_t TWI_READ_ACK(void) // Считываем часть данных, отправленных датчиком, и ждем вторую часть данных
{
	uint8_t data;
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 61e:	84 ec       	ldi	r24, 0xC4	; 196
 620:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWI_WAIT();
 624:	0e 94 44 03 	call	0x688	; 0x688 <TWI_WAIT>
	data = TWDR;
 628:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	return data;
}
 62c:	08 95       	ret

Disassembly of section .text.TWI_READ_NACK:

000005da <TWI_READ_NACK>:

uint8_t TWI_READ_NACK(void) // Считываем данные, отправленные датчиком, и заканчиваем общение
{
	uint8_t data;
	TWCR &= ~(1<<TWEA);
 5da:	ec eb       	ldi	r30, 0xBC	; 188
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	80 81       	ld	r24, Z
 5e0:	8f 7b       	andi	r24, 0xBF	; 191
 5e2:	80 83       	st	Z, r24
	TWCR =(1<<TWINT) | (1<<TWEN);
 5e4:	84 e8       	ldi	r24, 0x84	; 132
 5e6:	80 83       	st	Z, r24
	TWI_WAIT();
 5e8:	0e 94 44 03 	call	0x688	; 0x688 <TWI_WAIT>
	data = TWDR;
 5ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	return data;
	
}
 5f0:	08 95       	ret

Disassembly of section .text.Write_to_USART:

00000664 <Write_to_USART>:
}

void Write_to_USART(float celsius_temperature) // Функция для перевода в целочисленное значение и отправки температуры, полученной с датчика, через ЮСАРТ на компьютер 
{
	celsius_temperature = celsius_temperature/1;
	uint8_t temp = (uint8_t)celsius_temperature;
 664:	0e 94 06 02 	call	0x40c	; 0x40c <__fixunssfsi>
 668:	86 2f       	mov	r24, r22
	send(temp);
 66a:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 66e:	08 95       	ret

Disassembly of section .text.temp_sensor_read:

00000292 <temp_sensor_read>:
}

	void temp_sensor_read(void) // Функция общения с датчиком температуры
	{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
		
		TWI_START();
 296:	0e 94 49 03 	call	0x692	; 0x692 <TWI_START>
		TWI_WAIT();
 29a:	0e 94 44 03 	call	0x688	; 0x688 <TWI_WAIT>
		TWI_SEND(ADDR_W);
 29e:	81 e9       	ldi	r24, 0x91	; 145
 2a0:	0e 94 2c 03 	call	0x658	; 0x658 <TWI_SEND>
		TWI_WAIT();
 2a4:	0e 94 44 03 	call	0x688	; 0x688 <TWI_WAIT>
		TWI_SEND(0x00);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 2c 03 	call	0x658	; 0x658 <TWI_SEND>
		//TWI_WAIT(); // stop here // пока оставить
		

		TWI_START();
 2ae:	0e 94 49 03 	call	0x692	; 0x692 <TWI_START>
		TWI_WAIT();
 2b2:	0e 94 44 03 	call	0x688	; 0x688 <TWI_WAIT>
		TWI_SEND(ADDR_R);
 2b6:	80 e9       	ldi	r24, 0x90	; 144
 2b8:	0e 94 2c 03 	call	0x658	; 0x658 <TWI_SEND>
		TWI_WAIT();
 2bc:	0e 94 44 03 	call	0x688	; 0x688 <TWI_WAIT>
		
		TWI_WAIT();
 2c0:	0e 94 44 03 	call	0x688	; 0x688 <TWI_WAIT>
		uint8_t msb = TWI_READ_ACK(); // Переменная для записи первого пакета данных с датчика
 2c4:	0e 94 0f 03 	call	0x61e	; 0x61e <TWI_READ_ACK>
 2c8:	c8 2f       	mov	r28, r24
		TWI_WAIT();
 2ca:	0e 94 44 03 	call	0x688	; 0x688 <TWI_WAIT>
		uint8_t lsb = TWI_READ_NACK(); // Переменная для записи второго пакета данных с датчика
 2ce:	0e 94 ed 02 	call	0x5da	; 0x5da <TWI_READ_NACK>
 2d2:	d8 2f       	mov	r29, r24
		TWI_WAIT();
 2d4:	0e 94 44 03 	call	0x688	; 0x688 <TWI_WAIT>
		TWI_STOP();
 2d8:	0e 94 4d 03 	call	0x69a	; 0x69a <TWI_STOP>

		// Объединяем два полученных пакета в одной переменной
		int16_t temperature = (msb << 8) | lsb;
 2dc:	6c 2f       	mov	r22, r28
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	76 2f       	mov	r23, r22
 2e2:	66 27       	eor	r22, r22
 2e4:	6d 2b       	or	r22, r29
		temperature = (int16_t)(temperature << 7) >> 7;
 2e6:	76 95       	lsr	r23
 2e8:	76 2f       	mov	r23, r22
 2ea:	66 27       	eor	r22, r22
 2ec:	77 95       	ror	r23
 2ee:	67 95       	ror	r22
 2f0:	66 0f       	add	r22, r22
 2f2:	67 2f       	mov	r22, r23
 2f4:	66 1f       	adc	r22, r22
 2f6:	77 0b       	sbc	r23, r23
		float celsius_temperature = (float)temperature * 0.125;
 2f8:	07 2e       	mov	r0, r23
 2fa:	00 0c       	add	r0, r0
 2fc:	88 0b       	sbc	r24, r24
 2fe:	99 0b       	sbc	r25, r25
 300:	0e 94 97 01 	call	0x32e	; 0x32e <__floatsisf>
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	5e e3       	ldi	r21, 0x3E	; 62
 30c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__mulsf3>
		
		current_temp = celsius_temperature;	 // Записываем полученную с датчика температуру в глобальную переменную для возможной дальнейшей работы
 310:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <_end>
 314:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <_end+0x1>
 318:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_end+0x2>
 31c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_end+0x3>
		
		Write_to_USART(celsius_temperature); //Отправляем полученную температуру в ЮСАРТ
 320:	0e 94 32 03 	call	0x664	; 0x664 <Write_to_USART>
		
	}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

Disassembly of section .text.__vector_11:

0000046a <__vector_11>:
	return data;
	
}

ISR(TIMER1_COMPA_vect) // Прерывание по таймеру
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
	uint8_t start_stop = start_stop_allow(); // Считываем значение start_stop
 48c:	0e 94 55 03 	call	0x6aa	; 0x6aa <start_stop_allow>
	if(start_stop == 1) // Если значение start_stop рано единице, то разрешаем работу с датчиком, если - 0, то запрещаем работу с датчиком
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	11 f4       	brne	.+4      	; 0x498 <__vector_11+0x2e>
	{
		temp_sensor_read(); // Функция общения с датчиком температуры 
 494:	0e 94 49 01 	call	0x292	; 0x292 <temp_sensor_read>
	}
}
 498:	ff 91       	pop	r31
 49a:	ef 91       	pop	r30
 49c:	bf 91       	pop	r27
 49e:	af 91       	pop	r26
 4a0:	9f 91       	pop	r25
 4a2:	8f 91       	pop	r24
 4a4:	7f 91       	pop	r23
 4a6:	6f 91       	pop	r22
 4a8:	5f 91       	pop	r21
 4aa:	4f 91       	pop	r20
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

Disassembly of section .text.__vector_18:

000003a4 <__vector_18>:

uint8_t Data_to_share = 0; //Температура, отправляемая в блок commands
uint8_t start_stop = 0; //Переменная для включения-выключения работы программы датчика температуры с компьютера (0 - выключена, 1 - включена)

ISR(USART_RX_vect)
{	
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	uint8_t data = UDR0 - '0'; // Записываем данные полученные с компьютера и переводим их в численное значение
 3b6:	e6 ec       	ldi	r30, 0xC6	; 198
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	80 53       	subi	r24, 0x30	; 48
	int Data_s_t = UDR0;
 3be:	90 81       	ld	r25, Z
	if (Data_s_t == 's') // Если с компьютера приходит символ s увеличиваем/уменьшаем значение start_stop (включаем/выключаем программу работы с датчиком)
 3c0:	93 37       	cpi	r25, 0x73	; 115
 3c2:	51 f4       	brne	.+20     	; 0x3d8 <__vector_18+0x34>
	{
		start_stop++;
 3c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <start_stop>
 3c8:	8f 5f       	subi	r24, 0xFF	; 255
 3ca:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <start_stop>
		if (start_stop > 1)
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	a0 f0       	brcs	.+40     	; 0x3fa <__vector_18+0x56>
		{
			start_stop = 0;
 3d2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <start_stop>
 3d6:	11 c0       	rjmp	.+34     	; 0x3fa <__vector_18+0x56>
		}
		
	}
	else // Если с компьютера приходит любое другое значение, расцениваем его, как температуру
	{
		rx_buffer[rx_buffer_index] = data;
 3d8:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <rx_buffer_index>
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	e0 50       	subi	r30, 0x00	; 0
 3e0:	ff 4f       	sbci	r31, 0xFF	; 255
 3e2:	80 83       	st	Z, r24
		rx_buffer_index++;
 3e4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rx_buffer_index>
 3e8:	8f 5f       	subi	r24, 0xFF	; 255
 3ea:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <rx_buffer_index>
		if (rx_buffer_index == 2)
 3ee:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rx_buffer_index>
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	11 f4       	brne	.+4      	; 0x3fa <__vector_18+0x56>
		{
			rx_buffer_index = 0;
 3f6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rx_buffer_index>
		}
	}
	
}
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	9f 91       	pop	r25
 400:	8f 91       	pop	r24
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

Disassembly of section .text.start_stop_allow:

000006aa <start_stop_allow>:

uint8_t start_stop_allow() // Функция для передачи значения start_stop в другие модули
{
	return start_stop;
}
 6aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <start_stop>
 6ae:	08 95       	ret

Disassembly of section .text.USART_Init:

000005f2 <USART_Init>:

void USART_Init(unsigned int UBRR) // Функция инициализации ЮСАРТа
{
	// Устанавливаем скорость передачи
	UBRR0H = (unsigned char)(UBRR>>8);
 5f2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)UBRR;
 5f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // Разрешаем чтение, запись и прирывания для ЮСАРТа
 5fa:	88 e9       	ldi	r24, 0x98	; 152
 5fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00); // 8 bit, 1 stopbit
 600:	8e e0       	ldi	r24, 0x0E	; 14
 602:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 606:	08 95       	ret

Disassembly of section .text.overwriting:

0000053c <overwriting>:
		}
	}
}

uint8_t overwriting(uint8_t data) // Функция, которая переписывает значение температуры 1234 -> 4321 
{
 53c:	28 2f       	mov	r18, r24
	uint8_t newData = 0;
 53e:	80 e0       	ldi	r24, 0x00	; 0
	while(data > 0)
 540:	15 c0       	rjmp	.+42     	; 0x56c <overwriting+0x30>
	{
		newData = newData*10 + (data % 10);
 542:	88 0f       	add	r24, r24
 544:	98 2f       	mov	r25, r24
 546:	99 0f       	add	r25, r25
 548:	99 0f       	add	r25, r25
 54a:	89 0f       	add	r24, r25
 54c:	9d ec       	ldi	r25, 0xCD	; 205
 54e:	29 9f       	mul	r18, r25
 550:	91 2d       	mov	r25, r1
 552:	11 24       	eor	r1, r1
 554:	96 95       	lsr	r25
 556:	96 95       	lsr	r25
 558:	96 95       	lsr	r25
 55a:	49 2f       	mov	r20, r25
 55c:	44 0f       	add	r20, r20
 55e:	34 2f       	mov	r19, r20
 560:	33 0f       	add	r19, r19
 562:	33 0f       	add	r19, r19
 564:	34 0f       	add	r19, r20
 566:	23 1b       	sub	r18, r19
 568:	82 0f       	add	r24, r18
		data = data/10;
 56a:	29 2f       	mov	r18, r25
}

uint8_t overwriting(uint8_t data) // Функция, которая переписывает значение температуры 1234 -> 4321 
{
	uint8_t newData = 0;
	while(data > 0)
 56c:	21 11       	cpse	r18, r1
 56e:	e9 cf       	rjmp	.-46     	; 0x542 <overwriting+0x6>
	{
		newData = newData*10 + (data % 10);
		data = data/10;
	}
	return newData;
}
 570:	08 95       	ret

Disassembly of section .text.send:

000000d6 <send>:
	{
		while (!(UCSR0A & (1<<UDRE0))); // Проверяем буфер перед отправкой
		UDR0 = '-'; //Записываем минус в буфер для отправки
	}
	data = fabs(data); // Берем модуль от значения температуры
	data = overwriting(data); //Переписываем значение температуры 1234 -> 4321. Так надо.
  d6:	0e 94 9e 02 	call	0x53c	; 0x53c <overwriting>
	uint8_t c; // В c будем записывать по очереди цифры из data для отправки через ЮСАРТ
	while(data > 0)
  da:	6e c0       	rjmp	.+220    	; 0x1b8 <send+0xe2>
	{
		c = data%10;
  dc:	9d ec       	ldi	r25, 0xCD	; 205
  de:	89 9f       	mul	r24, r25
  e0:	91 2d       	mov	r25, r1
  e2:	11 24       	eor	r1, r1
  e4:	e9 2f       	mov	r30, r25
  e6:	e6 95       	lsr	r30
  e8:	e6 95       	lsr	r30
  ea:	e6 95       	lsr	r30
  ec:	4e 2f       	mov	r20, r30
  ee:	44 0f       	add	r20, r20
  f0:	e4 2f       	mov	r30, r20
  f2:	ee 0f       	add	r30, r30
  f4:	ee 0f       	add	r30, r30
  f6:	4e 0f       	add	r20, r30
  f8:	e8 2f       	mov	r30, r24
  fa:	e4 1b       	sub	r30, r20
		data = data/10;
  fc:	89 2f       	mov	r24, r25
  fe:	86 95       	lsr	r24
 100:	86 95       	lsr	r24
 102:	86 95       	lsr	r24
		switch(c) //Выбираем
 104:	4e 2f       	mov	r20, r30
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	4a 30       	cpi	r20, 0x0A	; 10
 10a:	51 05       	cpc	r21, r1
 10c:	08 f0       	brcs	.+2      	; 0x110 <send+0x3a>
 10e:	54 c0       	rjmp	.+168    	; 0x1b8 <send+0xe2>
 110:	fa 01       	movw	r30, r20
 112:	ec 5c       	subi	r30, 0xCC	; 204
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__tablejump2__>
		{
			case 0:
				while (!(UCSR0A & (1<<UDRE0))); // Проверяем буфер перед отправкой
 11a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11e:	95 ff       	sbrs	r25, 5
 120:	fc cf       	rjmp	.-8      	; 0x11a <send+0x44>
				UDR0 = '0'; //Записываем значение с в буфер для отправки
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 128:	47 c0       	rjmp	.+142    	; 0x1b8 <send+0xe2>
			case 1:
			case -1:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 12a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12e:	95 ff       	sbrs	r25, 5
 130:	fc cf       	rjmp	.-8      	; 0x12a <send+0x54>
				UDR0 = '1'; //Записываем значение с в буфер для отправки
 132:	91 e3       	ldi	r25, 0x31	; 49
 134:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 138:	3f c0       	rjmp	.+126    	; 0x1b8 <send+0xe2>
			case 2:
			case -2:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 13a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 13e:	95 ff       	sbrs	r25, 5
 140:	fc cf       	rjmp	.-8      	; 0x13a <send+0x64>
				UDR0 = '2'; //Записываем значение с в буфер для отправки
 142:	92 e3       	ldi	r25, 0x32	; 50
 144:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 148:	37 c0       	rjmp	.+110    	; 0x1b8 <send+0xe2>
			case 3:
			case -3:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 14a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14e:	95 ff       	sbrs	r25, 5
 150:	fc cf       	rjmp	.-8      	; 0x14a <send+0x74>
				UDR0 = '3'; //Записываем значение с в буфер для отправки
 152:	93 e3       	ldi	r25, 0x33	; 51
 154:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 158:	2f c0       	rjmp	.+94     	; 0x1b8 <send+0xe2>
			case 4:
			case -4:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 15a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15e:	95 ff       	sbrs	r25, 5
 160:	fc cf       	rjmp	.-8      	; 0x15a <send+0x84>
				UDR0 = '4';
 162:	94 e3       	ldi	r25, 0x34	; 52
 164:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 168:	27 c0       	rjmp	.+78     	; 0x1b8 <send+0xe2>
			case 5:
			case -5:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 16a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16e:	95 ff       	sbrs	r25, 5
 170:	fc cf       	rjmp	.-8      	; 0x16a <send+0x94>
				UDR0 = '5'; //Записываем значение с в буфер для отправки
 172:	95 e3       	ldi	r25, 0x35	; 53
 174:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 178:	1f c0       	rjmp	.+62     	; 0x1b8 <send+0xe2>
			case 6:
			case -6:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 17a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 17e:	95 ff       	sbrs	r25, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <send+0xa4>
				UDR0 = '6'; //Записываем значение с в буфер для отправки
 182:	96 e3       	ldi	r25, 0x36	; 54
 184:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 188:	17 c0       	rjmp	.+46     	; 0x1b8 <send+0xe2>
			case 7:
			case -7:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 18a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 18e:	95 ff       	sbrs	r25, 5
 190:	fc cf       	rjmp	.-8      	; 0x18a <send+0xb4>
				UDR0 = '7'; //Записываем значение с в буфер для отправки
 192:	97 e3       	ldi	r25, 0x37	; 55
 194:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 198:	0f c0       	rjmp	.+30     	; 0x1b8 <send+0xe2>
			case 8:
			case -8:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 19a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 19e:	95 ff       	sbrs	r25, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <send+0xc4>
				UDR0 = '8'; //Записываем значение с в буфер для отправки
 1a2:	98 e3       	ldi	r25, 0x38	; 56
 1a4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <send+0xe2>
			case 9:
			case -9:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 1aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ae:	95 ff       	sbrs	r25, 5
 1b0:	fc cf       	rjmp	.-8      	; 0x1aa <send+0xd4>
				UDR0 = '9'; //Записываем значение с в буфер для отправки
 1b2:	99 e3       	ldi	r25, 0x39	; 57
 1b4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		UDR0 = '-'; //Записываем минус в буфер для отправки
	}
	data = fabs(data); // Берем модуль от значения температуры
	data = overwriting(data); //Переписываем значение температуры 1234 -> 4321. Так надо.
	uint8_t c; // В c будем записывать по очереди цифры из data для отправки через ЮСАРТ
	while(data > 0)
 1b8:	81 11       	cpse	r24, r1
 1ba:	90 cf       	rjmp	.-224    	; 0xdc <send+0x6>
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
				UDR0 = '9'; //Записываем значение с в буфер для отправки
				break;
		}
	}
}
 1bc:	08 95       	ret

Disassembly of section .text.uart_read:

000005c0 <uart_read>:
}


uint8_t uart_read(void)
{
	Data_to_share = rx_buffer[0]*10 + rx_buffer[1]; // записываем значение полученной с компьютера температуры в целочисленную переменную для отправки в блок commands
 5c0:	e0 e0       	ldi	r30, 0x00	; 0
 5c2:	f1 e0       	ldi	r31, 0x01	; 1
 5c4:	80 81       	ld	r24, Z
 5c6:	91 81       	ldd	r25, Z+1	; 0x01
 5c8:	88 0f       	add	r24, r24
 5ca:	28 2f       	mov	r18, r24
 5cc:	22 0f       	add	r18, r18
 5ce:	22 0f       	add	r18, r18
 5d0:	82 0f       	add	r24, r18
 5d2:	89 0f       	add	r24, r25
 5d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <Data_to_share>
	return Data_to_share;
}
 5d8:	08 95       	ret

Disassembly of section .text:

0000040c <__fixunssfsi>:
 40c:	0e 94 65 02 	call	0x4ca	; 0x4ca <__fp_splitA>
 410:	88 f0       	brcs	.+34     	; 0x434 <__fixunssfsi+0x28>
 412:	9f 57       	subi	r25, 0x7F	; 127
 414:	98 f0       	brcs	.+38     	; 0x43c <__fixunssfsi+0x30>
 416:	b9 2f       	mov	r27, r25
 418:	99 27       	eor	r25, r25
 41a:	b7 51       	subi	r27, 0x17	; 23
 41c:	b0 f0       	brcs	.+44     	; 0x44a <__fixunssfsi+0x3e>
 41e:	e1 f0       	breq	.+56     	; 0x458 <__fixunssfsi+0x4c>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	1a f0       	brmi	.+6      	; 0x430 <__fixunssfsi+0x24>
 42a:	ba 95       	dec	r27
 42c:	c9 f7       	brne	.-14     	; 0x420 <__fixunssfsi+0x14>
 42e:	14 c0       	rjmp	.+40     	; 0x458 <__fixunssfsi+0x4c>
 430:	b1 30       	cpi	r27, 0x01	; 1
 432:	91 f0       	breq	.+36     	; 0x458 <__fixunssfsi+0x4c>
 434:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_zero>
 438:	b1 e0       	ldi	r27, 0x01	; 1
 43a:	08 95       	ret
 43c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__fp_zero>
 440:	67 2f       	mov	r22, r23
 442:	78 2f       	mov	r23, r24
 444:	88 27       	eor	r24, r24
 446:	b8 5f       	subi	r27, 0xF8	; 248
 448:	39 f0       	breq	.+14     	; 0x458 <__fixunssfsi+0x4c>
 44a:	b9 3f       	cpi	r27, 0xF9	; 249
 44c:	cc f3       	brlt	.-14     	; 0x440 <__fixunssfsi+0x34>
 44e:	86 95       	lsr	r24
 450:	77 95       	ror	r23
 452:	67 95       	ror	r22
 454:	b3 95       	inc	r27
 456:	d9 f7       	brne	.-10     	; 0x44e <__fixunssfsi+0x42>
 458:	3e f4       	brtc	.+14     	; 0x468 <__fixunssfsi+0x5c>
 45a:	90 95       	com	r25
 45c:	80 95       	com	r24
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

Disassembly of section .text:

0000032a <__floatunsisf>:
 32a:	e8 94       	clt
 32c:	09 c0       	rjmp	.+18     	; 0x340 <__floatsisf+0x12>

0000032e <__floatsisf>:
 32e:	97 fb       	bst	r25, 7
 330:	3e f4       	brtc	.+14     	; 0x340 <__floatsisf+0x12>
 332:	90 95       	com	r25
 334:	80 95       	com	r24
 336:	70 95       	com	r23
 338:	61 95       	neg	r22
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	8f 4f       	sbci	r24, 0xFF	; 255
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	99 23       	and	r25, r25
 342:	a9 f0       	breq	.+42     	; 0x36e <__floatsisf+0x40>
 344:	f9 2f       	mov	r31, r25
 346:	96 e9       	ldi	r25, 0x96	; 150
 348:	bb 27       	eor	r27, r27
 34a:	93 95       	inc	r25
 34c:	f6 95       	lsr	r31
 34e:	87 95       	ror	r24
 350:	77 95       	ror	r23
 352:	67 95       	ror	r22
 354:	b7 95       	ror	r27
 356:	f1 11       	cpse	r31, r1
 358:	f8 cf       	rjmp	.-16     	; 0x34a <__floatsisf+0x1c>
 35a:	fa f4       	brpl	.+62     	; 0x39a <__floatsisf+0x6c>
 35c:	bb 0f       	add	r27, r27
 35e:	11 f4       	brne	.+4      	; 0x364 <__floatsisf+0x36>
 360:	60 ff       	sbrs	r22, 0
 362:	1b c0       	rjmp	.+54     	; 0x39a <__floatsisf+0x6c>
 364:	6f 5f       	subi	r22, 0xFF	; 255
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	8f 4f       	sbci	r24, 0xFF	; 255
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	16 c0       	rjmp	.+44     	; 0x39a <__floatsisf+0x6c>
 36e:	88 23       	and	r24, r24
 370:	11 f0       	breq	.+4      	; 0x376 <__floatsisf+0x48>
 372:	96 e9       	ldi	r25, 0x96	; 150
 374:	11 c0       	rjmp	.+34     	; 0x398 <__floatsisf+0x6a>
 376:	77 23       	and	r23, r23
 378:	21 f0       	breq	.+8      	; 0x382 <__floatsisf+0x54>
 37a:	9e e8       	ldi	r25, 0x8E	; 142
 37c:	87 2f       	mov	r24, r23
 37e:	76 2f       	mov	r23, r22
 380:	05 c0       	rjmp	.+10     	; 0x38c <__floatsisf+0x5e>
 382:	66 23       	and	r22, r22
 384:	71 f0       	breq	.+28     	; 0x3a2 <__floatsisf+0x74>
 386:	96 e8       	ldi	r25, 0x86	; 134
 388:	86 2f       	mov	r24, r22
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	2a f0       	brmi	.+10     	; 0x39a <__floatsisf+0x6c>
 390:	9a 95       	dec	r25
 392:	66 0f       	add	r22, r22
 394:	77 1f       	adc	r23, r23
 396:	88 1f       	adc	r24, r24
 398:	da f7       	brpl	.-10     	; 0x390 <__floatsisf+0x62>
 39a:	88 0f       	add	r24, r24
 39c:	96 95       	lsr	r25
 39e:	87 95       	ror	r24
 3a0:	97 f9       	bld	r25, 7
 3a2:	08 95       	ret

Disassembly of section .text:

000004ba <__fp_split3>:
 4ba:	57 fd       	sbrc	r21, 7
 4bc:	90 58       	subi	r25, 0x80	; 128
 4be:	44 0f       	add	r20, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	59 f0       	breq	.+22     	; 0x4da <__fp_splitA+0x10>
 4c4:	5f 3f       	cpi	r21, 0xFF	; 255
 4c6:	71 f0       	breq	.+28     	; 0x4e4 <__fp_splitA+0x1a>
 4c8:	47 95       	ror	r20

000004ca <__fp_splitA>:
 4ca:	88 0f       	add	r24, r24
 4cc:	97 fb       	bst	r25, 7
 4ce:	99 1f       	adc	r25, r25
 4d0:	61 f0       	breq	.+24     	; 0x4ea <__fp_splitA+0x20>
 4d2:	9f 3f       	cpi	r25, 0xFF	; 255
 4d4:	79 f0       	breq	.+30     	; 0x4f4 <__fp_splitA+0x2a>
 4d6:	87 95       	ror	r24
 4d8:	08 95       	ret
 4da:	12 16       	cp	r1, r18
 4dc:	13 06       	cpc	r1, r19
 4de:	14 06       	cpc	r1, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	f2 cf       	rjmp	.-28     	; 0x4c8 <__fp_split3+0xe>
 4e4:	46 95       	lsr	r20
 4e6:	f1 df       	rcall	.-30     	; 0x4ca <__fp_splitA>
 4e8:	08 c0       	rjmp	.+16     	; 0x4fa <__fp_splitA+0x30>
 4ea:	16 16       	cp	r1, r22
 4ec:	17 06       	cpc	r1, r23
 4ee:	18 06       	cpc	r1, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	f1 cf       	rjmp	.-30     	; 0x4d6 <__fp_splitA+0xc>
 4f4:	86 95       	lsr	r24
 4f6:	71 05       	cpc	r23, r1
 4f8:	61 05       	cpc	r22, r1
 4fa:	08 94       	sec
 4fc:	08 95       	ret

Disassembly of section .text:

0000062e <__fp_zero>:
 62e:	e8 94       	clt

00000630 <__fp_szero>:
 630:	bb 27       	eor	r27, r27
 632:	66 27       	eor	r22, r22
 634:	77 27       	eor	r23, r23
 636:	cb 01       	movw	r24, r22
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

Disassembly of section .text:

000006a2 <__mulsf3>:
 6a2:	0e 94 df 00 	call	0x1be	; 0x1be <__mulsf3x>
 6a6:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__fp_round>

Disassembly of section .text:

000001be <__mulsf3x>:
 1be:	0f c0       	rjmp	.+30     	; 0x1de <__mulsf3x+0x20>
 1c0:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_pscA>
 1c4:	38 f0       	brcs	.+14     	; 0x1d4 <__mulsf3x+0x16>
 1c6:	0e 94 25 03 	call	0x64a	; 0x64a <__fp_pscB>
 1ca:	20 f0       	brcs	.+8      	; 0x1d4 <__mulsf3x+0x16>
 1cc:	95 23       	and	r25, r21
 1ce:	11 f0       	breq	.+4      	; 0x1d4 <__mulsf3x+0x16>
 1d0:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_inf>
 1d4:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_nan>
 1d8:	11 24       	eor	r1, r1
 1da:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>
 1de:	0e 94 5d 02 	call	0x4ba	; 0x4ba <__fp_split3>
 1e2:	70 f3       	brcs	.-36     	; 0x1c0 <__mulsf3x+0x2>

000001e4 <__mulsf3_pse>:
 1e4:	95 9f       	mul	r25, r21
 1e6:	c1 f3       	breq	.-16     	; 0x1d8 <__mulsf3x+0x1a>
 1e8:	95 0f       	add	r25, r21
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	55 1f       	adc	r21, r21
 1ee:	62 9f       	mul	r22, r18
 1f0:	f0 01       	movw	r30, r0
 1f2:	72 9f       	mul	r23, r18
 1f4:	bb 27       	eor	r27, r27
 1f6:	f0 0d       	add	r31, r0
 1f8:	b1 1d       	adc	r27, r1
 1fa:	63 9f       	mul	r22, r19
 1fc:	aa 27       	eor	r26, r26
 1fe:	f0 0d       	add	r31, r0
 200:	b1 1d       	adc	r27, r1
 202:	aa 1f       	adc	r26, r26
 204:	64 9f       	mul	r22, r20
 206:	66 27       	eor	r22, r22
 208:	b0 0d       	add	r27, r0
 20a:	a1 1d       	adc	r26, r1
 20c:	66 1f       	adc	r22, r22
 20e:	82 9f       	mul	r24, r18
 210:	22 27       	eor	r18, r18
 212:	b0 0d       	add	r27, r0
 214:	a1 1d       	adc	r26, r1
 216:	62 1f       	adc	r22, r18
 218:	73 9f       	mul	r23, r19
 21a:	b0 0d       	add	r27, r0
 21c:	a1 1d       	adc	r26, r1
 21e:	62 1f       	adc	r22, r18
 220:	83 9f       	mul	r24, r19
 222:	a0 0d       	add	r26, r0
 224:	61 1d       	adc	r22, r1
 226:	22 1f       	adc	r18, r18
 228:	74 9f       	mul	r23, r20
 22a:	33 27       	eor	r19, r19
 22c:	a0 0d       	add	r26, r0
 22e:	61 1d       	adc	r22, r1
 230:	23 1f       	adc	r18, r19
 232:	84 9f       	mul	r24, r20
 234:	60 0d       	add	r22, r0
 236:	21 1d       	adc	r18, r1
 238:	82 2f       	mov	r24, r18
 23a:	76 2f       	mov	r23, r22
 23c:	6a 2f       	mov	r22, r26
 23e:	11 24       	eor	r1, r1
 240:	9f 57       	subi	r25, 0x7F	; 127
 242:	50 40       	sbci	r21, 0x00	; 0
 244:	9a f0       	brmi	.+38     	; 0x26c <__mulsf3_pse+0x88>
 246:	f1 f0       	breq	.+60     	; 0x284 <__mulsf3_pse+0xa0>
 248:	88 23       	and	r24, r24
 24a:	4a f0       	brmi	.+18     	; 0x25e <__mulsf3_pse+0x7a>
 24c:	ee 0f       	add	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	bb 1f       	adc	r27, r27
 252:	66 1f       	adc	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	88 1f       	adc	r24, r24
 258:	91 50       	subi	r25, 0x01	; 1
 25a:	50 40       	sbci	r21, 0x00	; 0
 25c:	a9 f7       	brne	.-22     	; 0x248 <__mulsf3_pse+0x64>
 25e:	9e 3f       	cpi	r25, 0xFE	; 254
 260:	51 05       	cpc	r21, r1
 262:	80 f0       	brcs	.+32     	; 0x284 <__mulsf3_pse+0xa0>
 264:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_inf>
 268:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_szero>
 26c:	5f 3f       	cpi	r21, 0xFF	; 255
 26e:	e4 f3       	brlt	.-8      	; 0x268 <__mulsf3_pse+0x84>
 270:	98 3e       	cpi	r25, 0xE8	; 232
 272:	d4 f3       	brlt	.-12     	; 0x268 <__mulsf3_pse+0x84>
 274:	86 95       	lsr	r24
 276:	77 95       	ror	r23
 278:	67 95       	ror	r22
 27a:	b7 95       	ror	r27
 27c:	f7 95       	ror	r31
 27e:	e7 95       	ror	r30
 280:	9f 5f       	subi	r25, 0xFF	; 255
 282:	c1 f7       	brne	.-16     	; 0x274 <__mulsf3_pse+0x90>
 284:	fe 2b       	or	r31, r30
 286:	88 0f       	add	r24, r24
 288:	91 1d       	adc	r25, r1
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	97 f9       	bld	r25, 7
 290:	08 95       	ret

Disassembly of section .text:

00000670 <__fp_inf>:
 670:	97 f9       	bld	r25, 7
 672:	9f 67       	ori	r25, 0x7F	; 127
 674:	80 e8       	ldi	r24, 0x80	; 128
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	08 95       	ret

Disassembly of section .text:

000006b0 <__fp_nan>:
 6b0:	9f ef       	ldi	r25, 0xFF	; 255
 6b2:	80 ec       	ldi	r24, 0xC0	; 192
 6b4:	08 95       	ret

Disassembly of section .text:

0000063c <__fp_pscA>:
 63c:	00 24       	eor	r0, r0
 63e:	0a 94       	dec	r0
 640:	16 16       	cp	r1, r22
 642:	17 06       	cpc	r1, r23
 644:	18 06       	cpc	r1, r24
 646:	09 06       	cpc	r0, r25
 648:	08 95       	ret

Disassembly of section .text:

0000064a <__fp_pscB>:
 64a:	00 24       	eor	r0, r0
 64c:	0a 94       	dec	r0
 64e:	12 16       	cp	r1, r18
 650:	13 06       	cpc	r1, r19
 652:	14 06       	cpc	r1, r20
 654:	05 06       	cpc	r0, r21
 656:	08 95       	ret

Disassembly of section .text:

0000059e <__fp_round>:
 59e:	09 2e       	mov	r0, r25
 5a0:	03 94       	inc	r0
 5a2:	00 0c       	add	r0, r0
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__fp_round+0xc>
 5a6:	88 23       	and	r24, r24
 5a8:	52 f0       	brmi	.+20     	; 0x5be <__fp_round+0x20>
 5aa:	bb 0f       	add	r27, r27
 5ac:	40 f4       	brcc	.+16     	; 0x5be <__fp_round+0x20>
 5ae:	bf 2b       	or	r27, r31
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <__fp_round+0x18>
 5b2:	60 ff       	sbrs	r22, 0
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <__fp_round+0x20>
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8f 4f       	sbci	r24, 0xFF	; 255
 5bc:	9f 4f       	sbci	r25, 0xFF	; 255
 5be:	08 95       	ret

Disassembly of section .text.libgcc:

0000067c <__tablejump2__>:
 67c:	ee 0f       	add	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	05 90       	lpm	r0, Z+
 682:	f4 91       	lpm	r31, Z
 684:	e0 2d       	mov	r30, r0
 686:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000006c0 <_fini>:
 6c0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000006c2 <__funcs_on_exit>:
 6c2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000006c4 <__simulator_exit>:
 6c4:	08 95       	ret

Disassembly of section .text.exit:

00000608 <exit>:
 608:	ec 01       	movw	r28, r24
 60a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__funcs_on_exit>
 60e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_fini>
 612:	ce 01       	movw	r24, r28
 614:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__simulator_exit>
 618:	ce 01       	movw	r24, r28
 61a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_Exit>

Disassembly of section .text._Exit:

000006ba <_Exit>:
 6ba:	0e 94 69 00 	call	0xd2	; 0xd2 <_exit>
