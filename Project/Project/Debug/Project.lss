
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000742  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000742  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 000000c4  00000000  00000000  00000771  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001541  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090f  00000000  00000000  00001e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ec  00000000  00000000  0000276d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000242  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000392  00000000  00000000  0000327e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000069e  0000069e  00000732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000036b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.command 00000002  000006a6  000006a6  0000073a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000032  00000520  00000520  000005b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.temp_sensor_init 0000002c  00000552  00000552  000005e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TWI_WAIT 0000000a  00000676  00000676  0000070a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.TWI_START 00000008  00000680  00000680  00000714  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.TWI_SEND 0000000c  00000646  00000646  000006da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.TWI_STOP 00000008  00000688  00000688  0000071c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.TWI_READ_ACK 00000010  000005fe  000005fe  00000692  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.TWI_READ_NACK 00000018  000005ba  000005ba  0000064e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.Write_to_USART 0000000c  00000652  00000652  000006e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.temp_sensor_read 000000ac  00000292  00000292  00000326  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_11 00000048  00000416  00000416  000004aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .bss.current_temp 00000002  00800105  00800105  00000742  2**0
                  ALLOC
 28 .text.__vector_18 00000048  0000045e  0000045e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.USART_Init 00000016  000005d2  000005d2  00000666  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.overwriting 00000036  000004ea  000004ea  0000057e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.send    000000e8  000000d6  000000d6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.uart_read 0000001a  000005a0  000005a0  00000634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .bss.Data_to_share 00000001  00800107  00800107  00000742  2**0
                  ALLOC
 34 .bss.rx_buffer_index 00000001  00800108  00800108  00000742  2**0
                  ALLOC
 35 .text         0000000e  0000060e  0000060e  000006a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text         0000005e  000003b8  000003b8  0000044c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text         0000007a  0000033e  0000033e  000003d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text         00000044  000004a6  000004a6  0000053a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         0000000e  0000061c  0000061c  000006b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         00000008  00000690  00000690  00000724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         000000d4  000001be  000001be  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         0000000c  0000065e  0000065e  000006f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         00000006  00000698  00000698  0000072c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text         0000000e  0000062a  0000062a  000006be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text         0000000e  00000638  00000638  000006cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text         00000022  0000057e  0000057e  00000612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.libgcc  0000000c  0000066a  0000066a  000006fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__dummy_fini 00000002  000006a8  000006a8  0000073c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.__dummy_funcs_on_exit 00000002  000006aa  000006aa  0000073e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__dummy_simulator_exit 00000002  000006ac  000006ac  00000740  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.exit    00000016  000005e8  000005e8  0000067c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text._Exit   00000004  000006a2  000006a2  00000736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
   8:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
   c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  10:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  14:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  18:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  1c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  20:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  24:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  28:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  2c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_11>
  30:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  34:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  38:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  3c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  40:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  44:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  48:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_18>
  4c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  50:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  54:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  58:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  5c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  60:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  64:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__bad_interrupt>
  68:	8d 00       	.word	0x008d	; ????
  6a:	95 00       	.word	0x0095	; ????
  6c:	9d 00       	.word	0x009d	; ????
  6e:	a5 00       	.word	0x00a5	; ????
  70:	ad 00       	.word	0x00ad	; ????
  72:	b5 00       	.word	0x00b5	; ????
  74:	bd 00       	.word	0x00bd	; ????
  76:	c5 00       	.word	0x00c5	; ????
  78:	cd 00       	.word	0x00cd	; ????
  7a:	d5 00       	.word	0x00d5	; ????

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 09       	sbc	r16, r1
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 90 02 	call	0x520	; 0x520 <main>
  ce:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

0000069e <__bad_interrupt>:
 69e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.command:

000006a6 <command>:
﻿#include <xc.h>
#include "save.h"

void command(uint8_t temperature)
{
 6a6:	08 95       	ret

Disassembly of section .text.main:

00000520 <main>:



int main(void)
{
	SREG |=(1<<7);
 520:	8f b7       	in	r24, 0x3f	; 63
 522:	80 68       	ori	r24, 0x80	; 128
 524:	8f bf       	out	0x3f, r24	; 63
	USART_Init(UBRR_VALUE); //инициализация UART
 526:	83 e3       	ldi	r24, 0x33	; 51
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <USART_Init>
	temp_sensor_init();//инициализация датчика температуры
 52e:	0e 94 a9 02 	call	0x552	; 0x552 <temp_sensor_init>
	
	DDRD |= (1<<1);// Установка PD1 как пин для выхода ИК диода	
 532:	8a b1       	in	r24, 0x0a	; 10
 534:	82 60       	ori	r24, 0x02	; 2
 536:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << 1); // Убираем напряжение с PD1
 538:	8b b1       	in	r24, 0x0b	; 11
 53a:	8d 7f       	andi	r24, 0xFD	; 253
 53c:	8b b9       	out	0x0b, r24	; 11
	uint8_t last_temperature = 0;
 53e:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		
		uint8_t temp_to_command = uart_read(); // Записываем значение температуры, полученное с компьютера, в переменную temp_to_command
 540:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <uart_read>
 544:	c8 2f       	mov	r28, r24
		if(last_temperature != temp_to_command) // Если температура, получаемая с компьютера, изменилась
 546:	d8 17       	cp	r29, r24
 548:	d9 f3       	breq	.-10     	; 0x540 <main+0x20>
		{
		command(temp_to_command); // Отправляем значение полученной с компьютера температуры в блок commands
 54a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <command>
		last_temperature = temp_to_command;
 54e:	dc 2f       	mov	r29, r28
 550:	f7 cf       	rjmp	.-18     	; 0x540 <main+0x20>

Disassembly of section .text.temp_sensor_init:

00000552 <temp_sensor_init>:
#define ADDR_R 0b10010000

int16_t current_temp = 0;

void temp_sensor_init(void) {
	TWSR = 0;
 552:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = ((F_CPU / F_SCL) - 16) / 2;
 556:	80 e2       	ldi	r24, 0x20	; 32
 558:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
 55c:	e1 e8       	ldi	r30, 0x81	; 129
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	80 81       	ld	r24, Z
 562:	8d 60       	ori	r24, 0x0D	; 13
 564:	80 83       	st	Z, r24
	OCR1A = 15624;
 566:	88 e0       	ldi	r24, 0x08	; 8
 568:	9d e3       	ldi	r25, 0x3D	; 61
 56a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 56e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A);
 572:	ef e6       	ldi	r30, 0x6F	; 111
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	82 60       	ori	r24, 0x02	; 2
 57a:	80 83       	st	Z, r24
 57c:	08 95       	ret

Disassembly of section .text.TWI_WAIT:

00000676 <TWI_WAIT>:
}

void TWI_WAIT(void)
{
	while(!(TWCR & (1<<TWINT)));
 676:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 67a:	88 23       	and	r24, r24
 67c:	e4 f7       	brge	.-8      	; 0x676 <TWI_WAIT>
}
 67e:	08 95       	ret

Disassembly of section .text.TWI_START:

00000680 <TWI_START>:

void TWI_START(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 680:	84 ea       	ldi	r24, 0xA4	; 164
 682:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 686:	08 95       	ret

Disassembly of section .text.TWI_SEND:

00000646 <TWI_SEND>:
}

void TWI_SEND(unsigned char Data)
{
	TWDR = Data;
 646:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 64a:	84 e8       	ldi	r24, 0x84	; 132
 64c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 650:	08 95       	ret

Disassembly of section .text.TWI_STOP:

00000688 <TWI_STOP>:
}

void TWI_STOP(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 688:	84 e9       	ldi	r24, 0x94	; 148
 68a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 68e:	08 95       	ret

Disassembly of section .text.TWI_READ_ACK:

000005fe <TWI_READ_ACK>:
}

uint8_t TWI_READ_ACK(void)
{
	uint8_t data;
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 5fe:	84 ec       	ldi	r24, 0xC4	; 196
 600:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWI_WAIT();
 604:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WAIT>
	data = TWDR;
 608:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	return data;
}
 60c:	08 95       	ret

Disassembly of section .text.TWI_READ_NACK:

000005ba <TWI_READ_NACK>:

uint8_t TWI_READ_NACK(void)
{
	uint8_t data;
	TWCR &= ~(1<<TWEA);
 5ba:	ec eb       	ldi	r30, 0xBC	; 188
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	8f 7b       	andi	r24, 0xBF	; 191
 5c2:	80 83       	st	Z, r24
	TWCR =(1<<TWINT) | (1<<TWEN);
 5c4:	84 e8       	ldi	r24, 0x84	; 132
 5c6:	80 83       	st	Z, r24
	TWI_WAIT();
 5c8:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WAIT>
	data = TWDR;
 5cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	return data;
	
}
 5d0:	08 95       	ret

Disassembly of section .text.Write_to_USART:

00000652 <Write_to_USART>:
}

void Write_to_USART(float celsius_temperature)
{
	celsius_temperature = celsius_temperature/1;
	uint8_t temp = (uint8_t)celsius_temperature;
 652:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__fixunssfsi>
 656:	86 2f       	mov	r24, r22
	send(temp);
 658:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 65c:	08 95       	ret

Disassembly of section .text.temp_sensor_read:

00000292 <temp_sensor_read>:
	
}

	void temp_sensor_read(void) {
 292:	cf 92       	push	r12
 294:	df 92       	push	r13
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	cf 93       	push	r28
		
		TWI_START();
 29c:	0e 94 40 03 	call	0x680	; 0x680 <TWI_START>
		TWI_WAIT();
 2a0:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WAIT>
		TWI_SEND(ADDR_W);
 2a4:	81 e9       	ldi	r24, 0x91	; 145
 2a6:	0e 94 23 03 	call	0x646	; 0x646 <TWI_SEND>
		TWI_WAIT();
 2aa:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WAIT>
		TWI_SEND(0x00);
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 23 03 	call	0x646	; 0x646 <TWI_SEND>
		TWI_WAIT();
 2b4:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WAIT>

		TWI_START();
 2b8:	0e 94 40 03 	call	0x680	; 0x680 <TWI_START>
		TWI_WAIT();
 2bc:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WAIT>
		TWI_SEND(ADDR_R);
 2c0:	80 e9       	ldi	r24, 0x90	; 144
 2c2:	0e 94 23 03 	call	0x646	; 0x646 <TWI_SEND>
		TWI_WAIT();
 2c6:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WAIT>
		
		TWI_WAIT();
 2ca:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WAIT>
		uint8_t msb = TWI_READ_ACK();
 2ce:	0e 94 ff 02 	call	0x5fe	; 0x5fe <TWI_READ_ACK>
 2d2:	c8 2f       	mov	r28, r24
		TWI_WAIT();
 2d4:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WAIT>
		uint8_t lsb = TWI_READ_NACK();
 2d8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <TWI_READ_NACK>
 2dc:	f8 2e       	mov	r15, r24
		TWI_WAIT();
 2de:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_WAIT>
		TWI_STOP();
 2e2:	0e 94 44 03 	call	0x688	; 0x688 <TWI_STOP>

		int16_t temperature = (msb << 8) | lsb;
 2e6:	6c 2f       	mov	r22, r28
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	76 2f       	mov	r23, r22
 2ec:	66 27       	eor	r22, r22
 2ee:	6f 29       	or	r22, r15
		temperature = (int16_t)(temperature << 7) >> 7;
 2f0:	76 95       	lsr	r23
 2f2:	76 2f       	mov	r23, r22
 2f4:	66 27       	eor	r22, r22
 2f6:	77 95       	ror	r23
 2f8:	67 95       	ror	r22
 2fa:	66 0f       	add	r22, r22
 2fc:	67 2f       	mov	r22, r23
 2fe:	66 1f       	adc	r22, r22
 300:	77 0b       	sbc	r23, r23
		float celsius_temperature = (float)temperature * 0.5;
 302:	07 2e       	mov	r0, r23
 304:	00 0c       	add	r0, r0
 306:	88 0b       	sbc	r24, r24
 308:	99 0b       	sbc	r25, r25
 30a:	0e 94 a1 01 	call	0x342	; 0x342 <__floatsisf>
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	5f e3       	ldi	r21, 0x3F	; 63
 316:	0e 94 48 03 	call	0x690	; 0x690 <__mulsf3>
 31a:	6b 01       	movw	r12, r22
 31c:	7c 01       	movw	r14, r24
		
		current_temp = celsius_temperature;
 31e:	0e 94 07 03 	call	0x60e	; 0x60e <__fixsfsi>
 322:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <_end+0x1>
 326:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <_end>
		
		Write_to_USART(celsius_temperature);
 32a:	c7 01       	movw	r24, r14
 32c:	b6 01       	movw	r22, r12
 32e:	0e 94 29 03 	call	0x652	; 0x652 <Write_to_USART>
		
	}
 332:	cf 91       	pop	r28
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	cf 90       	pop	r12
 33c:	08 95       	ret

Disassembly of section .text.__vector_11:

00000416 <__vector_11>:
	data = TWDR;
	return data;
	
}

ISR(TIMER1_COMPA_vect) {
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	2f 93       	push	r18
 422:	3f 93       	push	r19
 424:	4f 93       	push	r20
 426:	5f 93       	push	r21
 428:	6f 93       	push	r22
 42a:	7f 93       	push	r23
 42c:	8f 93       	push	r24
 42e:	9f 93       	push	r25
 430:	af 93       	push	r26
 432:	bf 93       	push	r27
 434:	ef 93       	push	r30
 436:	ff 93       	push	r31
	temp_sensor_read();
 438:	0e 94 49 01 	call	0x292	; 0x292 <temp_sensor_read>
}
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

Disassembly of section .text.__vector_18:

0000045e <__vector_18>:
//Оставить до испытания

uint8_t Data_to_share = 0; //Температура, отправляемая в блок commands

ISR(USART_RX_vect)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	8f 93       	push	r24
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
	uint8_t data = UDR0 - '0';
 46e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 472:	80 53       	subi	r24, 0x30	; 48
	rx_buffer[rx_buffer_index] = data;
 474:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <rx_buffer_index>
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	e0 50       	subi	r30, 0x00	; 0
 47c:	ff 4f       	sbci	r31, 0xFF	; 255
 47e:	80 83       	st	Z, r24
	rx_buffer_index++;
 480:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rx_buffer_index>
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <rx_buffer_index>
	if (rx_buffer_index == 2)
 48a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <rx_buffer_index>
 48e:	82 30       	cpi	r24, 0x02	; 2
 490:	11 f4       	brne	.+4      	; 0x496 <__vector_18+0x38>
	{
		rx_buffer_index = 0;
 492:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <rx_buffer_index>
	}
	
}
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	8f 91       	pop	r24
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

Disassembly of section .text.USART_Init:

000005d2 <USART_Init>:

void USART_Init(unsigned int UBRR)
{
	// Устанавливаем скорость передачи
	UBRR0H = (unsigned char)(UBRR>>8);
 5d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)UBRR;
 5d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // Разрешаем чтение, запись и прирывания для ЮСАРТа
 5da:	88 e9       	ldi	r24, 0x98	; 152
 5dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00); // 8 bit, 1 stopbit
 5e0:	8e e0       	ldi	r24, 0x0E	; 14
 5e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 5e6:	08 95       	ret

Disassembly of section .text.overwriting:

000004ea <overwriting>:
		}
	}
}

uint8_t overwriting(uint8_t data) // Функция, которая переписывает значение температуры 1234 -> 4321 
{
 4ea:	28 2f       	mov	r18, r24
	uint8_t newData = 0;
 4ec:	80 e0       	ldi	r24, 0x00	; 0
	while(data > 0)
 4ee:	15 c0       	rjmp	.+42     	; 0x51a <overwriting+0x30>
	{
		newData = newData*10 + (data % 10);
 4f0:	88 0f       	add	r24, r24
 4f2:	98 2f       	mov	r25, r24
 4f4:	99 0f       	add	r25, r25
 4f6:	99 0f       	add	r25, r25
 4f8:	89 0f       	add	r24, r25
 4fa:	9d ec       	ldi	r25, 0xCD	; 205
 4fc:	29 9f       	mul	r18, r25
 4fe:	91 2d       	mov	r25, r1
 500:	11 24       	eor	r1, r1
 502:	96 95       	lsr	r25
 504:	96 95       	lsr	r25
 506:	96 95       	lsr	r25
 508:	49 2f       	mov	r20, r25
 50a:	44 0f       	add	r20, r20
 50c:	34 2f       	mov	r19, r20
 50e:	33 0f       	add	r19, r19
 510:	33 0f       	add	r19, r19
 512:	34 0f       	add	r19, r20
 514:	23 1b       	sub	r18, r19
 516:	82 0f       	add	r24, r18
		data = data/10;
 518:	29 2f       	mov	r18, r25
}

uint8_t overwriting(uint8_t data) // Функция, которая переписывает значение температуры 1234 -> 4321 
{
	uint8_t newData = 0;
	while(data > 0)
 51a:	21 11       	cpse	r18, r1
 51c:	e9 cf       	rjmp	.-46     	; 0x4f0 <overwriting+0x6>
	{
		newData = newData*10 + (data % 10);
		data = data/10;
	}
	return newData;
}
 51e:	08 95       	ret

Disassembly of section .text.send:

000000d6 <send>:
	{
		while (!(UCSR0A & (1<<UDRE0))); // Проверяем буфер перед отправкой
		UDR0 = '-'; //Записываем минус в буфер для отправки
	}
	data = fabs(data); // Берем модуль от значения температуры
	data = overwriting(data); //Переписываем значение температуры 1234 -> 4321. Так надо.
  d6:	0e 94 75 02 	call	0x4ea	; 0x4ea <overwriting>
	uint8_t c; // В c будем записывать по очереди цифры из data для отправки через ЮСАРТ
	while(data > 0)
  da:	6e c0       	rjmp	.+220    	; 0x1b8 <send+0xe2>
	{
		c = data%10;
  dc:	9d ec       	ldi	r25, 0xCD	; 205
  de:	89 9f       	mul	r24, r25
  e0:	91 2d       	mov	r25, r1
  e2:	11 24       	eor	r1, r1
  e4:	e9 2f       	mov	r30, r25
  e6:	e6 95       	lsr	r30
  e8:	e6 95       	lsr	r30
  ea:	e6 95       	lsr	r30
  ec:	4e 2f       	mov	r20, r30
  ee:	44 0f       	add	r20, r20
  f0:	e4 2f       	mov	r30, r20
  f2:	ee 0f       	add	r30, r30
  f4:	ee 0f       	add	r30, r30
  f6:	4e 0f       	add	r20, r30
  f8:	e8 2f       	mov	r30, r24
  fa:	e4 1b       	sub	r30, r20
		data = data/10;
  fc:	89 2f       	mov	r24, r25
  fe:	86 95       	lsr	r24
 100:	86 95       	lsr	r24
 102:	86 95       	lsr	r24
		switch(c) //Выбираем
 104:	4e 2f       	mov	r20, r30
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	4a 30       	cpi	r20, 0x0A	; 10
 10a:	51 05       	cpc	r21, r1
 10c:	08 f0       	brcs	.+2      	; 0x110 <send+0x3a>
 10e:	54 c0       	rjmp	.+168    	; 0x1b8 <send+0xe2>
 110:	fa 01       	movw	r30, r20
 112:	ec 5c       	subi	r30, 0xCC	; 204
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	0c 94 35 03 	jmp	0x66a	; 0x66a <__tablejump2__>
		{
			case 0:
				while (!(UCSR0A & (1<<UDRE0))); // Проверяем буфер перед отправкой
 11a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11e:	95 ff       	sbrs	r25, 5
 120:	fc cf       	rjmp	.-8      	; 0x11a <send+0x44>
				UDR0 = '0'; //Записываем значение с в буфер для отправки
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 128:	47 c0       	rjmp	.+142    	; 0x1b8 <send+0xe2>
			case 1:
			case -1:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 12a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12e:	95 ff       	sbrs	r25, 5
 130:	fc cf       	rjmp	.-8      	; 0x12a <send+0x54>
				UDR0 = '1'; //Записываем значение с в буфер для отправки
 132:	91 e3       	ldi	r25, 0x31	; 49
 134:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 138:	3f c0       	rjmp	.+126    	; 0x1b8 <send+0xe2>
			case 2:
			case -2:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 13a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 13e:	95 ff       	sbrs	r25, 5
 140:	fc cf       	rjmp	.-8      	; 0x13a <send+0x64>
				UDR0 = '2'; //Записываем значение с в буфер для отправки
 142:	92 e3       	ldi	r25, 0x32	; 50
 144:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 148:	37 c0       	rjmp	.+110    	; 0x1b8 <send+0xe2>
			case 3:
			case -3:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 14a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14e:	95 ff       	sbrs	r25, 5
 150:	fc cf       	rjmp	.-8      	; 0x14a <send+0x74>
				UDR0 = '3'; //Записываем значение с в буфер для отправки
 152:	93 e3       	ldi	r25, 0x33	; 51
 154:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 158:	2f c0       	rjmp	.+94     	; 0x1b8 <send+0xe2>
			case 4:
			case -4:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 15a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 15e:	95 ff       	sbrs	r25, 5
 160:	fc cf       	rjmp	.-8      	; 0x15a <send+0x84>
				UDR0 = '4';
 162:	94 e3       	ldi	r25, 0x34	; 52
 164:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 168:	27 c0       	rjmp	.+78     	; 0x1b8 <send+0xe2>
			case 5:
			case -5:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 16a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16e:	95 ff       	sbrs	r25, 5
 170:	fc cf       	rjmp	.-8      	; 0x16a <send+0x94>
				UDR0 = '5'; //Записываем значение с в буфер для отправки
 172:	95 e3       	ldi	r25, 0x35	; 53
 174:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 178:	1f c0       	rjmp	.+62     	; 0x1b8 <send+0xe2>
			case 6:
			case -6:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 17a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 17e:	95 ff       	sbrs	r25, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <send+0xa4>
				UDR0 = '6'; //Записываем значение с в буфер для отправки
 182:	96 e3       	ldi	r25, 0x36	; 54
 184:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 188:	17 c0       	rjmp	.+46     	; 0x1b8 <send+0xe2>
			case 7:
			case -7:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 18a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 18e:	95 ff       	sbrs	r25, 5
 190:	fc cf       	rjmp	.-8      	; 0x18a <send+0xb4>
				UDR0 = '7'; //Записываем значение с в буфер для отправки
 192:	97 e3       	ldi	r25, 0x37	; 55
 194:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 198:	0f c0       	rjmp	.+30     	; 0x1b8 <send+0xe2>
			case 8:
			case -8:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 19a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 19e:	95 ff       	sbrs	r25, 5
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <send+0xc4>
				UDR0 = '8'; //Записываем значение с в буфер для отправки
 1a2:	98 e3       	ldi	r25, 0x38	; 56
 1a4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <send+0xe2>
			case 9:
			case -9:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 1aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ae:	95 ff       	sbrs	r25, 5
 1b0:	fc cf       	rjmp	.-8      	; 0x1aa <send+0xd4>
				UDR0 = '9'; //Записываем значение с в буфер для отправки
 1b2:	99 e3       	ldi	r25, 0x39	; 57
 1b4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		UDR0 = '-'; //Записываем минус в буфер для отправки
	}
	data = fabs(data); // Берем модуль от значения температуры
	data = overwriting(data); //Переписываем значение температуры 1234 -> 4321. Так надо.
	uint8_t c; // В c будем записывать по очереди цифры из data для отправки через ЮСАРТ
	while(data > 0)
 1b8:	81 11       	cpse	r24, r1
 1ba:	90 cf       	rjmp	.-224    	; 0xdc <send+0x6>
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
				UDR0 = '9'; //Записываем значение с в буфер для отправки
				break;
		}
	}
}
 1bc:	08 95       	ret

Disassembly of section .text.uart_read:

000005a0 <uart_read>:
}


uint8_t uart_read(void)
{
	Data_to_share = rx_buffer[0]*10 + rx_buffer[1]; // записываем значение полученной с компьютера температуры в целочисленную переменную для отправки в блок commands
 5a0:	e0 e0       	ldi	r30, 0x00	; 0
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
 5a4:	80 81       	ld	r24, Z
 5a6:	91 81       	ldd	r25, Z+1	; 0x01
 5a8:	88 0f       	add	r24, r24
 5aa:	28 2f       	mov	r18, r24
 5ac:	22 0f       	add	r18, r18
 5ae:	22 0f       	add	r18, r18
 5b0:	82 0f       	add	r24, r18
 5b2:	89 0f       	add	r24, r25
 5b4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <Data_to_share>
	return Data_to_share;
}
 5b8:	08 95       	ret

Disassembly of section .text:

0000060e <__fixsfsi>:
 60e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__fixunssfsi>
 612:	68 94       	set
 614:	b1 11       	cpse	r27, r1
 616:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_szero>
 61a:	08 95       	ret

Disassembly of section .text:

000003b8 <__fixunssfsi>:
 3b8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__fp_splitA>
 3bc:	88 f0       	brcs	.+34     	; 0x3e0 <__fixunssfsi+0x28>
 3be:	9f 57       	subi	r25, 0x7F	; 127
 3c0:	98 f0       	brcs	.+38     	; 0x3e8 <__fixunssfsi+0x30>
 3c2:	b9 2f       	mov	r27, r25
 3c4:	99 27       	eor	r25, r25
 3c6:	b7 51       	subi	r27, 0x17	; 23
 3c8:	b0 f0       	brcs	.+44     	; 0x3f6 <__fixunssfsi+0x3e>
 3ca:	e1 f0       	breq	.+56     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	88 1f       	adc	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	1a f0       	brmi	.+6      	; 0x3dc <__fixunssfsi+0x24>
 3d6:	ba 95       	dec	r27
 3d8:	c9 f7       	brne	.-14     	; 0x3cc <__fixunssfsi+0x14>
 3da:	14 c0       	rjmp	.+40     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3dc:	b1 30       	cpi	r27, 0x01	; 1
 3de:	91 f0       	breq	.+36     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e0:	0e 94 0e 03 	call	0x61c	; 0x61c <__fp_zero>
 3e4:	b1 e0       	ldi	r27, 0x01	; 1
 3e6:	08 95       	ret
 3e8:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_zero>
 3ec:	67 2f       	mov	r22, r23
 3ee:	78 2f       	mov	r23, r24
 3f0:	88 27       	eor	r24, r24
 3f2:	b8 5f       	subi	r27, 0xF8	; 248
 3f4:	39 f0       	breq	.+14     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f6:	b9 3f       	cpi	r27, 0xF9	; 249
 3f8:	cc f3       	brlt	.-14     	; 0x3ec <__fixunssfsi+0x34>
 3fa:	86 95       	lsr	r24
 3fc:	77 95       	ror	r23
 3fe:	67 95       	ror	r22
 400:	b3 95       	inc	r27
 402:	d9 f7       	brne	.-10     	; 0x3fa <__fixunssfsi+0x42>
 404:	3e f4       	brtc	.+14     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 406:	90 95       	com	r25
 408:	80 95       	com	r24
 40a:	70 95       	com	r23
 40c:	61 95       	neg	r22
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	8f 4f       	sbci	r24, 0xFF	; 255
 412:	9f 4f       	sbci	r25, 0xFF	; 255
 414:	08 95       	ret

Disassembly of section .text:

0000033e <__floatunsisf>:
 33e:	e8 94       	clt
 340:	09 c0       	rjmp	.+18     	; 0x354 <__floatsisf+0x12>

00000342 <__floatsisf>:
 342:	97 fb       	bst	r25, 7
 344:	3e f4       	brtc	.+14     	; 0x354 <__floatsisf+0x12>
 346:	90 95       	com	r25
 348:	80 95       	com	r24
 34a:	70 95       	com	r23
 34c:	61 95       	neg	r22
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	8f 4f       	sbci	r24, 0xFF	; 255
 352:	9f 4f       	sbci	r25, 0xFF	; 255
 354:	99 23       	and	r25, r25
 356:	a9 f0       	breq	.+42     	; 0x382 <__floatsisf+0x40>
 358:	f9 2f       	mov	r31, r25
 35a:	96 e9       	ldi	r25, 0x96	; 150
 35c:	bb 27       	eor	r27, r27
 35e:	93 95       	inc	r25
 360:	f6 95       	lsr	r31
 362:	87 95       	ror	r24
 364:	77 95       	ror	r23
 366:	67 95       	ror	r22
 368:	b7 95       	ror	r27
 36a:	f1 11       	cpse	r31, r1
 36c:	f8 cf       	rjmp	.-16     	; 0x35e <__floatsisf+0x1c>
 36e:	fa f4       	brpl	.+62     	; 0x3ae <__floatsisf+0x6c>
 370:	bb 0f       	add	r27, r27
 372:	11 f4       	brne	.+4      	; 0x378 <__floatsisf+0x36>
 374:	60 ff       	sbrs	r22, 0
 376:	1b c0       	rjmp	.+54     	; 0x3ae <__floatsisf+0x6c>
 378:	6f 5f       	subi	r22, 0xFF	; 255
 37a:	7f 4f       	sbci	r23, 0xFF	; 255
 37c:	8f 4f       	sbci	r24, 0xFF	; 255
 37e:	9f 4f       	sbci	r25, 0xFF	; 255
 380:	16 c0       	rjmp	.+44     	; 0x3ae <__floatsisf+0x6c>
 382:	88 23       	and	r24, r24
 384:	11 f0       	breq	.+4      	; 0x38a <__floatsisf+0x48>
 386:	96 e9       	ldi	r25, 0x96	; 150
 388:	11 c0       	rjmp	.+34     	; 0x3ac <__floatsisf+0x6a>
 38a:	77 23       	and	r23, r23
 38c:	21 f0       	breq	.+8      	; 0x396 <__floatsisf+0x54>
 38e:	9e e8       	ldi	r25, 0x8E	; 142
 390:	87 2f       	mov	r24, r23
 392:	76 2f       	mov	r23, r22
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <__floatsisf+0x5e>
 396:	66 23       	and	r22, r22
 398:	71 f0       	breq	.+28     	; 0x3b6 <__floatsisf+0x74>
 39a:	96 e8       	ldi	r25, 0x86	; 134
 39c:	86 2f       	mov	r24, r22
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	2a f0       	brmi	.+10     	; 0x3ae <__floatsisf+0x6c>
 3a4:	9a 95       	dec	r25
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	da f7       	brpl	.-10     	; 0x3a4 <__floatsisf+0x62>
 3ae:	88 0f       	add	r24, r24
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	97 f9       	bld	r25, 7
 3b6:	08 95       	ret

Disassembly of section .text:

000004a6 <__fp_split3>:
 4a6:	57 fd       	sbrc	r21, 7
 4a8:	90 58       	subi	r25, 0x80	; 128
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	59 f0       	breq	.+22     	; 0x4c6 <__fp_splitA+0x10>
 4b0:	5f 3f       	cpi	r21, 0xFF	; 255
 4b2:	71 f0       	breq	.+28     	; 0x4d0 <__fp_splitA+0x1a>
 4b4:	47 95       	ror	r20

000004b6 <__fp_splitA>:
 4b6:	88 0f       	add	r24, r24
 4b8:	97 fb       	bst	r25, 7
 4ba:	99 1f       	adc	r25, r25
 4bc:	61 f0       	breq	.+24     	; 0x4d6 <__fp_splitA+0x20>
 4be:	9f 3f       	cpi	r25, 0xFF	; 255
 4c0:	79 f0       	breq	.+30     	; 0x4e0 <__fp_splitA+0x2a>
 4c2:	87 95       	ror	r24
 4c4:	08 95       	ret
 4c6:	12 16       	cp	r1, r18
 4c8:	13 06       	cpc	r1, r19
 4ca:	14 06       	cpc	r1, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	f2 cf       	rjmp	.-28     	; 0x4b4 <__fp_split3+0xe>
 4d0:	46 95       	lsr	r20
 4d2:	f1 df       	rcall	.-30     	; 0x4b6 <__fp_splitA>
 4d4:	08 c0       	rjmp	.+16     	; 0x4e6 <__fp_splitA+0x30>
 4d6:	16 16       	cp	r1, r22
 4d8:	17 06       	cpc	r1, r23
 4da:	18 06       	cpc	r1, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	f1 cf       	rjmp	.-30     	; 0x4c2 <__fp_splitA+0xc>
 4e0:	86 95       	lsr	r24
 4e2:	71 05       	cpc	r23, r1
 4e4:	61 05       	cpc	r22, r1
 4e6:	08 94       	sec
 4e8:	08 95       	ret

Disassembly of section .text:

0000061c <__fp_zero>:
 61c:	e8 94       	clt

0000061e <__fp_szero>:
 61e:	bb 27       	eor	r27, r27
 620:	66 27       	eor	r22, r22
 622:	77 27       	eor	r23, r23
 624:	cb 01       	movw	r24, r22
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret

Disassembly of section .text:

00000690 <__mulsf3>:
 690:	0e 94 df 00 	call	0x1be	; 0x1be <__mulsf3x>
 694:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__fp_round>

Disassembly of section .text:

000001be <__mulsf3x>:
 1be:	0f c0       	rjmp	.+30     	; 0x1de <__mulsf3x+0x20>
 1c0:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_pscA>
 1c4:	38 f0       	brcs	.+14     	; 0x1d4 <__mulsf3x+0x16>
 1c6:	0e 94 1c 03 	call	0x638	; 0x638 <__fp_pscB>
 1ca:	20 f0       	brcs	.+8      	; 0x1d4 <__mulsf3x+0x16>
 1cc:	95 23       	and	r25, r21
 1ce:	11 f0       	breq	.+4      	; 0x1d4 <__mulsf3x+0x16>
 1d0:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__fp_inf>
 1d4:	0c 94 4c 03 	jmp	0x698	; 0x698 <__fp_nan>
 1d8:	11 24       	eor	r1, r1
 1da:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_szero>
 1de:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fp_split3>
 1e2:	70 f3       	brcs	.-36     	; 0x1c0 <__mulsf3x+0x2>

000001e4 <__mulsf3_pse>:
 1e4:	95 9f       	mul	r25, r21
 1e6:	c1 f3       	breq	.-16     	; 0x1d8 <__mulsf3x+0x1a>
 1e8:	95 0f       	add	r25, r21
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	55 1f       	adc	r21, r21
 1ee:	62 9f       	mul	r22, r18
 1f0:	f0 01       	movw	r30, r0
 1f2:	72 9f       	mul	r23, r18
 1f4:	bb 27       	eor	r27, r27
 1f6:	f0 0d       	add	r31, r0
 1f8:	b1 1d       	adc	r27, r1
 1fa:	63 9f       	mul	r22, r19
 1fc:	aa 27       	eor	r26, r26
 1fe:	f0 0d       	add	r31, r0
 200:	b1 1d       	adc	r27, r1
 202:	aa 1f       	adc	r26, r26
 204:	64 9f       	mul	r22, r20
 206:	66 27       	eor	r22, r22
 208:	b0 0d       	add	r27, r0
 20a:	a1 1d       	adc	r26, r1
 20c:	66 1f       	adc	r22, r22
 20e:	82 9f       	mul	r24, r18
 210:	22 27       	eor	r18, r18
 212:	b0 0d       	add	r27, r0
 214:	a1 1d       	adc	r26, r1
 216:	62 1f       	adc	r22, r18
 218:	73 9f       	mul	r23, r19
 21a:	b0 0d       	add	r27, r0
 21c:	a1 1d       	adc	r26, r1
 21e:	62 1f       	adc	r22, r18
 220:	83 9f       	mul	r24, r19
 222:	a0 0d       	add	r26, r0
 224:	61 1d       	adc	r22, r1
 226:	22 1f       	adc	r18, r18
 228:	74 9f       	mul	r23, r20
 22a:	33 27       	eor	r19, r19
 22c:	a0 0d       	add	r26, r0
 22e:	61 1d       	adc	r22, r1
 230:	23 1f       	adc	r18, r19
 232:	84 9f       	mul	r24, r20
 234:	60 0d       	add	r22, r0
 236:	21 1d       	adc	r18, r1
 238:	82 2f       	mov	r24, r18
 23a:	76 2f       	mov	r23, r22
 23c:	6a 2f       	mov	r22, r26
 23e:	11 24       	eor	r1, r1
 240:	9f 57       	subi	r25, 0x7F	; 127
 242:	50 40       	sbci	r21, 0x00	; 0
 244:	9a f0       	brmi	.+38     	; 0x26c <__mulsf3_pse+0x88>
 246:	f1 f0       	breq	.+60     	; 0x284 <__mulsf3_pse+0xa0>
 248:	88 23       	and	r24, r24
 24a:	4a f0       	brmi	.+18     	; 0x25e <__mulsf3_pse+0x7a>
 24c:	ee 0f       	add	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	bb 1f       	adc	r27, r27
 252:	66 1f       	adc	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	88 1f       	adc	r24, r24
 258:	91 50       	subi	r25, 0x01	; 1
 25a:	50 40       	sbci	r21, 0x00	; 0
 25c:	a9 f7       	brne	.-22     	; 0x248 <__mulsf3_pse+0x64>
 25e:	9e 3f       	cpi	r25, 0xFE	; 254
 260:	51 05       	cpc	r21, r1
 262:	80 f0       	brcs	.+32     	; 0x284 <__mulsf3_pse+0xa0>
 264:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__fp_inf>
 268:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_szero>
 26c:	5f 3f       	cpi	r21, 0xFF	; 255
 26e:	e4 f3       	brlt	.-8      	; 0x268 <__mulsf3_pse+0x84>
 270:	98 3e       	cpi	r25, 0xE8	; 232
 272:	d4 f3       	brlt	.-12     	; 0x268 <__mulsf3_pse+0x84>
 274:	86 95       	lsr	r24
 276:	77 95       	ror	r23
 278:	67 95       	ror	r22
 27a:	b7 95       	ror	r27
 27c:	f7 95       	ror	r31
 27e:	e7 95       	ror	r30
 280:	9f 5f       	subi	r25, 0xFF	; 255
 282:	c1 f7       	brne	.-16     	; 0x274 <__mulsf3_pse+0x90>
 284:	fe 2b       	or	r31, r30
 286:	88 0f       	add	r24, r24
 288:	91 1d       	adc	r25, r1
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	97 f9       	bld	r25, 7
 290:	08 95       	ret

Disassembly of section .text:

0000065e <__fp_inf>:
 65e:	97 f9       	bld	r25, 7
 660:	9f 67       	ori	r25, 0x7F	; 127
 662:	80 e8       	ldi	r24, 0x80	; 128
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	08 95       	ret

Disassembly of section .text:

00000698 <__fp_nan>:
 698:	9f ef       	ldi	r25, 0xFF	; 255
 69a:	80 ec       	ldi	r24, 0xC0	; 192
 69c:	08 95       	ret

Disassembly of section .text:

0000062a <__fp_pscA>:
 62a:	00 24       	eor	r0, r0
 62c:	0a 94       	dec	r0
 62e:	16 16       	cp	r1, r22
 630:	17 06       	cpc	r1, r23
 632:	18 06       	cpc	r1, r24
 634:	09 06       	cpc	r0, r25
 636:	08 95       	ret

Disassembly of section .text:

00000638 <__fp_pscB>:
 638:	00 24       	eor	r0, r0
 63a:	0a 94       	dec	r0
 63c:	12 16       	cp	r1, r18
 63e:	13 06       	cpc	r1, r19
 640:	14 06       	cpc	r1, r20
 642:	05 06       	cpc	r0, r21
 644:	08 95       	ret

Disassembly of section .text:

0000057e <__fp_round>:
 57e:	09 2e       	mov	r0, r25
 580:	03 94       	inc	r0
 582:	00 0c       	add	r0, r0
 584:	11 f4       	brne	.+4      	; 0x58a <__fp_round+0xc>
 586:	88 23       	and	r24, r24
 588:	52 f0       	brmi	.+20     	; 0x59e <__fp_round+0x20>
 58a:	bb 0f       	add	r27, r27
 58c:	40 f4       	brcc	.+16     	; 0x59e <__fp_round+0x20>
 58e:	bf 2b       	or	r27, r31
 590:	11 f4       	brne	.+4      	; 0x596 <__fp_round+0x18>
 592:	60 ff       	sbrs	r22, 0
 594:	04 c0       	rjmp	.+8      	; 0x59e <__fp_round+0x20>
 596:	6f 5f       	subi	r22, 0xFF	; 255
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	08 95       	ret

Disassembly of section .text.libgcc:

0000066a <__tablejump2__>:
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	05 90       	lpm	r0, Z+
 670:	f4 91       	lpm	r31, Z
 672:	e0 2d       	mov	r30, r0
 674:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000006a8 <_fini>:
 6a8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000006aa <__funcs_on_exit>:
 6aa:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000006ac <__simulator_exit>:
 6ac:	08 95       	ret

Disassembly of section .text.exit:

000005e8 <exit>:
 5e8:	ec 01       	movw	r28, r24
 5ea:	0e 94 55 03 	call	0x6aa	; 0x6aa <__funcs_on_exit>
 5ee:	0e 94 54 03 	call	0x6a8	; 0x6a8 <_fini>
 5f2:	ce 01       	movw	r24, r28
 5f4:	0e 94 56 03 	call	0x6ac	; 0x6ac <__simulator_exit>
 5f8:	ce 01       	movw	r24, r28
 5fa:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_Exit>

Disassembly of section .text._Exit:

000006a2 <_Exit>:
 6a2:	0e 94 69 00 	call	0xd2	; 0xd2 <_exit>
