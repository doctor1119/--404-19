
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000077e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000077e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000077e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 000000b6  00000000  00000000  000007ad  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001658  00000000  00000000  00000953  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000994  00000000  00000000  00001fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a6  00000000  00000000  0000293f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000030e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000253  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000429  00000000  00000000  0000351b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000006da  000006da  0000076e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000039f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.command 00000002  000006e2  000006e2  00000776  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000050  0000047c  0000047c  00000510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.temp_sensor_init 0000002c  00000596  00000596  0000062a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TWI_WAIT 0000000a  000006ac  000006ac  00000740  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.TWI_START 00000008  000006b6  000006b6  0000074a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.TWI_SEND 0000000c  0000067c  0000067c  00000710  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.TWI_STOP 00000008  000006be  000006be  00000752  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.TWI_READ_ACK 00000010  00000642  00000642  000006d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.TWI_READ_NACK 00000018  000005fe  000005fe  00000692  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.Write_to_USART 0000000c  00000688  00000688  0000071c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.temp_sensor_read 00000098  000002a4  000002a4  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_11 00000050  000004cc  000004cc  00000560  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .bss.current_temp 00000004  00800104  00800104  0000077e  2**0
                  ALLOC
 28 .text.__vector_18 00000068  000003b6  000003b6  0000044a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.start_stop_allow 00000006  000006ce  000006ce  00000762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.USART_Init 00000016  00000616  00000616  000006aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.overwriting 00000036  00000560  00000560  000005f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.send    000000fa  000000d6  000000d6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.uart_read 0000001a  000005e4  000005e4  00000678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .bss.start_stop 00000001  00800108  00800108  0000077e  2**0
                  ALLOC
 35 .bss.Data_to_share 00000001  00800109  00800109  0000077e  2**0
                  ALLOC
 36 .bss.rx_buffer_index 00000001  0080010a  0080010a  0000077e  2**0
                  ALLOC
 37 .text         0000005e  0000041e  0000041e  000004b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text         0000007a  0000033c  0000033c  000003d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         00000044  0000051c  0000051c  000005b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         0000000e  00000652  00000652  000006e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         00000008  000006c6  000006c6  0000075a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         000000d4  000001d0  000001d0  00000264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         0000000c  00000694  00000694  00000728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text         00000006  000006d4  000006d4  00000768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text         0000000e  00000660  00000660  000006f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text         0000000e  0000066e  0000066e  00000702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text         00000022  000005c2  000005c2  00000656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.libgcc  0000000c  000006a0  000006a0  00000734  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.__dummy_fini 00000002  000006e4  000006e4  00000778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__dummy_funcs_on_exit 00000002  000006e6  000006e6  0000077a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.__dummy_simulator_exit 00000002  000006e8  000006e8  0000077c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.exit    00000016  0000062c  0000062c  000006c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text._Exit   00000004  000006de  000006de  00000772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
   8:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
   c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  10:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  14:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  18:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  1c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  20:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  24:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  28:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  2c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_11>
  30:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  34:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  38:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  3c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  40:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  44:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  48:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_18>
  4c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  50:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  54:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  58:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  5c:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  60:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  64:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__bad_interrupt>
  68:	96 00       	.word	0x0096	; ????
  6a:	9e 00       	.word	0x009e	; ????
  6c:	a6 00       	.word	0x00a6	; ????
  6e:	ae 00       	.word	0x00ae	; ????
  70:	b6 00       	.word	0x00b6	; ????
  72:	be 00       	.word	0x00be	; ????
  74:	c6 00       	.word	0x00c6	; ????
  76:	ce 00       	.word	0x00ce	; ????
  78:	d6 00       	.word	0x00d6	; ????
  7a:	de 00       	.word	0x00de	; ????

0000007c <.dinit>:
  7c:	01 00       	.word	0x0001	; ????
  7e:	01 0b       	sbc	r16, r17
  80:	80 00       	.word	0x0080	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf ef       	ldi	r28, 0xFF	; 255
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__do_clear_bss+0x8>
  96:	b5 91       	lpm	r27, Z+
  98:	a5 91       	lpm	r26, Z+
  9a:	35 91       	lpm	r19, Z+
  9c:	25 91       	lpm	r18, Z+
  9e:	05 91       	lpm	r16, Z+
  a0:	07 fd       	sbrc	r16, 7
  a2:	0c c0       	rjmp	.+24     	; 0xbc <__do_clear_bss>
  a4:	95 91       	lpm	r25, Z+
  a6:	85 91       	lpm	r24, Z+
  a8:	ef 01       	movw	r28, r30
  aa:	f9 2f       	mov	r31, r25
  ac:	e8 2f       	mov	r30, r24
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0x20>
  b8:	fe 01       	movw	r30, r28
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <__do_clear_bss+0x8>

000000bc <__do_clear_bss>:
  bc:	1d 92       	st	X+, r1
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	e1 f7       	brne	.-8      	; 0xbc <__do_clear_bss>
  c4:	e1 38       	cpi	r30, 0x81	; 129
  c6:	f4 07       	cpc	r31, r20
  c8:	31 f7       	brne	.-52     	; 0x96 <__do_copy_data+0x8>
  ca:	0e 94 3e 02 	call	0x47c	; 0x47c <main>
  ce:	0c 94 16 03 	jmp	0x62c	; 0x62c <exit>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>

Disassembly of section .text:

000006da <__bad_interrupt>:
 6da:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.command:

000006e2 <command>:
﻿#include <xc.h>
#include "save.h"

void command(uint8_t temperature)
{
 6e2:	08 95       	ret

Disassembly of section .text.main:

0000047c <main>:



int main(void)
{
	DDRC &= ~((1<<4) | (1<<5)); //Установка пинов PC5 и PC4 на прием информации с датчика температуры (для интерфейса I2C)
 47c:	87 b1       	in	r24, 0x07	; 7
 47e:	8f 7c       	andi	r24, 0xCF	; 207
 480:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<4) | (1<<5); // Убираем напряжение с пинов PC4 и PC5
 482:	88 b1       	in	r24, 0x08	; 8
 484:	80 63       	ori	r24, 0x30	; 48
 486:	88 b9       	out	0x08, r24	; 8
	SREG |=(1<<7); // Разрешаем глобальные прерывания
 488:	8f b7       	in	r24, 0x3f	; 63
 48a:	80 68       	ori	r24, 0x80	; 128
 48c:	8f bf       	out	0x3f, r24	; 63
	USART_Init(UBRR_VALUE); //инициализация UART
 48e:	83 e3       	ldi	r24, 0x33	; 51
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 0b 03 	call	0x616	; 0x616 <USART_Init>
	temp_sensor_init();//инициализация датчика температуры
 496:	0e 94 cb 02 	call	0x596	; 0x596 <temp_sensor_init>
	DDRD |= (1<<1);// Установка PD1 как пин для выхода ИК диода	
 49a:	8a b1       	in	r24, 0x0a	; 10
 49c:	82 60       	ori	r24, 0x02	; 2
 49e:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << 1); // Убираем напряжение с PD1
 4a0:	8b b1       	in	r24, 0x0b	; 11
 4a2:	8d 7f       	andi	r24, 0xFD	; 253
 4a4:	8b b9       	out	0x0b, r24	; 11
	uint8_t last_temperature = 0;
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a8:	2f e3       	ldi	r18, 0x3F	; 63
 4aa:	8d e0       	ldi	r24, 0x0D	; 13
 4ac:	93 e0       	ldi	r25, 0x03	; 3
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	80 40       	sbci	r24, 0x00	; 0
 4b2:	90 40       	sbci	r25, 0x00	; 0
 4b4:	e1 f7       	brne	.-8      	; 0x4ae <main+0x32>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <main+0x3c>
 4b8:	00 00       	nop
	while (1)
	{
		_delay_ms(1000); // костыль-задержка, чтобы функция uart_read успела правильно сформировать данные
		uint8_t temp_to_command = uart_read(); // Записываем значение температуры, полученное с компьютера, в переменную temp_to_command
 4ba:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <uart_read>
 4be:	c8 2f       	mov	r28, r24
		if(last_temperature != temp_to_command) // Если температура, получаемая с компьютера, изменилась
 4c0:	d8 17       	cp	r29, r24
 4c2:	91 f3       	breq	.-28     	; 0x4a8 <main+0x2c>
		{
		command(temp_to_command); // Отправляем значение полученной с компьютера температуры в блок commands
 4c4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <command>
		last_temperature = temp_to_command; // Записываем в last_temperature последнее отправленное значение температуры для следующей проверки
 4c8:	dc 2f       	mov	r29, r28
 4ca:	ee cf       	rjmp	.-36     	; 0x4a8 <main+0x2c>

Disassembly of section .text.temp_sensor_init:

00000596 <temp_sensor_init>:
float current_temp = 0; // Значение температуры

void temp_sensor_init(void) // Функция инициализации датчика температуры и установки таймера
{
	// Инициализация датчика температуры
	TWSR = 0;
 596:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = ((F_CPU / F_SCL) - 16) / 2;
 59a:	80 e2       	ldi	r24, 0x20	; 32
 59c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

	// Установка прерывания по таймеру раз в секунду
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
 5a0:	e1 e8       	ldi	r30, 0x81	; 129
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	8d 60       	ori	r24, 0x0D	; 13
 5a8:	80 83       	st	Z, r24
	OCR1A = 15624;
 5aa:	88 e0       	ldi	r24, 0x08	; 8
 5ac:	9d e3       	ldi	r25, 0x3D	; 61
 5ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 5b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A);
 5b6:	ef e6       	ldi	r30, 0x6F	; 111
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	82 60       	ori	r24, 0x02	; 2
 5be:	80 83       	st	Z, r24
 5c0:	08 95       	ret

Disassembly of section .text.TWI_WAIT:

000006ac <TWI_WAIT>:
}

void TWI_WAIT(void) // Ожидание окончания предыдущей операции
{
	while(!(TWCR & (1<<TWINT)));
 6ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6b0:	88 23       	and	r24, r24
 6b2:	e4 f7       	brge	.-8      	; 0x6ac <TWI_WAIT>
}
 6b4:	08 95       	ret

Disassembly of section .text.TWI_START:

000006b6 <TWI_START>:

void TWI_START(void) // Начало общение с датчиком
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 6b6:	84 ea       	ldi	r24, 0xA4	; 164
 6b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6bc:	08 95       	ret

Disassembly of section .text.TWI_SEND:

0000067c <TWI_SEND>:
}

void TWI_SEND(unsigned char Data) // Отправка информации на датчик 
{
	TWDR = Data;
 67c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 680:	84 e8       	ldi	r24, 0x84	; 132
 682:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 686:	08 95       	ret

Disassembly of section .text.TWI_STOP:

000006be <TWI_STOP>:
}

void TWI_STOP(void) // Окончание работы с датчиком
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 6be:	84 e9       	ldi	r24, 0x94	; 148
 6c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6c4:	08 95       	ret

Disassembly of section .text.TWI_READ_ACK:

00000642 <TWI_READ_ACK>:
}

uint8_t TWI_READ_ACK(void) // Считываем часть данных, отправленных датчиком, и ждем вторую часть данных
{
	uint8_t data;
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 642:	84 ec       	ldi	r24, 0xC4	; 196
 644:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWI_WAIT();
 648:	0e 94 56 03 	call	0x6ac	; 0x6ac <TWI_WAIT>
	data = TWDR;
 64c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	return data;
}
 650:	08 95       	ret

Disassembly of section .text.TWI_READ_NACK:

000005fe <TWI_READ_NACK>:

uint8_t TWI_READ_NACK(void) // Считываем данные, отправленные датчиком, и заканчиваем общение
{
	uint8_t data;
	TWCR &= ~(1<<TWEA);
 5fe:	ec eb       	ldi	r30, 0xBC	; 188
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	8f 7b       	andi	r24, 0xBF	; 191
 606:	80 83       	st	Z, r24
	TWCR =(1<<TWINT) | (1<<TWEN);
 608:	84 e8       	ldi	r24, 0x84	; 132
 60a:	80 83       	st	Z, r24
	TWI_WAIT();
 60c:	0e 94 56 03 	call	0x6ac	; 0x6ac <TWI_WAIT>
	data = TWDR;
 610:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	return data;
	
}
 614:	08 95       	ret

Disassembly of section .text.Write_to_USART:

00000688 <Write_to_USART>:
}

void Write_to_USART(float celsius_temperature) // Функция для перевода в целочисленное значение и отправки температуры, полученной с датчика, через ЮСАРТ на компьютер 
{
	celsius_temperature = celsius_temperature/1;
	uint8_t temp = (uint8_t)celsius_temperature;
 688:	0e 94 0f 02 	call	0x41e	; 0x41e <__fixunssfsi>
 68c:	86 2f       	mov	r24, r22
	send(temp);
 68e:	0e 94 6b 00 	call	0xd6	; 0xd6 <__data_load_end>
 692:	08 95       	ret

Disassembly of section .text.temp_sensor_read:

000002a4 <temp_sensor_read>:
}

	void temp_sensor_read(void) // Функция общения с датчиком температуры
	{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
		
		TWI_START();
 2a8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <TWI_START>
		TWI_WAIT();
 2ac:	0e 94 56 03 	call	0x6ac	; 0x6ac <TWI_WAIT>
		TWI_SEND(ADDR_W);
 2b0:	81 e9       	ldi	r24, 0x91	; 145
 2b2:	0e 94 3e 03 	call	0x67c	; 0x67c <TWI_SEND>
		TWI_WAIT();
 2b6:	0e 94 56 03 	call	0x6ac	; 0x6ac <TWI_WAIT>
		TWI_SEND(0x00);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 3e 03 	call	0x67c	; 0x67c <TWI_SEND>
		//TWI_WAIT(); // stop here // пока оставить
		

		TWI_START();
 2c0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <TWI_START>
		TWI_WAIT();
 2c4:	0e 94 56 03 	call	0x6ac	; 0x6ac <TWI_WAIT>
		TWI_SEND(ADDR_R);
 2c8:	80 e9       	ldi	r24, 0x90	; 144
 2ca:	0e 94 3e 03 	call	0x67c	; 0x67c <TWI_SEND>
		TWI_WAIT();
 2ce:	0e 94 56 03 	call	0x6ac	; 0x6ac <TWI_WAIT>
		
		TWI_WAIT();
 2d2:	0e 94 56 03 	call	0x6ac	; 0x6ac <TWI_WAIT>
		uint8_t msb = TWI_READ_ACK(); // Переменная для записи первого пакета данных с датчика
 2d6:	0e 94 21 03 	call	0x642	; 0x642 <TWI_READ_ACK>
 2da:	c8 2f       	mov	r28, r24
		TWI_WAIT();
 2dc:	0e 94 56 03 	call	0x6ac	; 0x6ac <TWI_WAIT>
		uint8_t lsb = TWI_READ_NACK(); // Переменная для записи второго пакета данных с датчика
 2e0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <TWI_READ_NACK>
 2e4:	d8 2f       	mov	r29, r24
		TWI_WAIT();
 2e6:	0e 94 56 03 	call	0x6ac	; 0x6ac <TWI_WAIT>
		TWI_STOP();
 2ea:	0e 94 5f 03 	call	0x6be	; 0x6be <TWI_STOP>

		// Объединяем два полученных пакета в одной переменной
		int16_t temperature = (msb << 8) | lsb;
 2ee:	6c 2f       	mov	r22, r28
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	76 2f       	mov	r23, r22
 2f4:	66 27       	eor	r22, r22
 2f6:	6d 2b       	or	r22, r29
		temperature = (int16_t)(temperature << 7) >> 7;
 2f8:	76 95       	lsr	r23
 2fa:	76 2f       	mov	r23, r22
 2fc:	66 27       	eor	r22, r22
 2fe:	77 95       	ror	r23
 300:	67 95       	ror	r22
 302:	66 0f       	add	r22, r22
 304:	67 2f       	mov	r22, r23
 306:	66 1f       	adc	r22, r22
 308:	77 0b       	sbc	r23, r23
		float celsius_temperature = (float)temperature * 0.125;
 30a:	07 2e       	mov	r0, r23
 30c:	00 0c       	add	r0, r0
 30e:	88 0b       	sbc	r24, r24
 310:	99 0b       	sbc	r25, r25
 312:	0e 94 a0 01 	call	0x340	; 0x340 <__floatsisf>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	5e e3       	ldi	r21, 0x3E	; 62
 31e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__mulsf3>
		
		current_temp = celsius_temperature;	 // Записываем полученную с датчика температуру в глобальную переменную для возможной дальнейшей работы
 322:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_end>
 326:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_end+0x1>
 32a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_end+0x2>
 32e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_end+0x3>
		
		Write_to_USART(celsius_temperature); //Отправляем полученную температуру в ЮСАРТ
 332:	0e 94 44 03 	call	0x688	; 0x688 <Write_to_USART>
		
	}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

Disassembly of section .text.__vector_11:

000004cc <__vector_11>:
	return data;
	
}

ISR(TIMER1_COMPA_vect) // Прерывание по таймеру
{
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	2f 93       	push	r18
 4d8:	3f 93       	push	r19
 4da:	4f 93       	push	r20
 4dc:	5f 93       	push	r21
 4de:	6f 93       	push	r22
 4e0:	7f 93       	push	r23
 4e2:	8f 93       	push	r24
 4e4:	9f 93       	push	r25
 4e6:	af 93       	push	r26
 4e8:	bf 93       	push	r27
 4ea:	ef 93       	push	r30
 4ec:	ff 93       	push	r31
	uint8_t start_stop = start_stop_allow(); // Считываем значение start_stop
 4ee:	0e 94 67 03 	call	0x6ce	; 0x6ce <start_stop_allow>
	if(start_stop == 1) // Если значение start_stop рано единице, то разрешаем работу с датчиком, если - 0, то запрещаем работу с датчиком
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__vector_11+0x2e>
	{
		temp_sensor_read(); // Функция общения с датчиком температуры 
 4f6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <temp_sensor_read>
	}
}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

Disassembly of section .text.__vector_18:

000003b6 <__vector_18>:

uint8_t Data_to_share = 0; //Температура, отправляемая в блок commands
uint8_t start_stop = 0; //Переменная для включения-выключения работы программы датчика температуры с компьютера (0 - выключена, 1 - включена)

ISR(USART_RX_vect)
{	
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	8f 93       	push	r24
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
	int Data_s_t = UDR0; // Записываем данные, полученные с компьютера
 3c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (Data_s_t == 's')// Если с компьютера приходит символ s увеличиваем/уменьшаем значение start_stop (включаем/выключаем программу работы с датчиком)
 3ca:	83 37       	cpi	r24, 0x73	; 115
 3cc:	51 f4       	brne	.+20     	; 0x3e2 <__vector_18+0x2c>
	{
		start_stop++;
 3ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <start_stop>
 3d2:	8f 5f       	subi	r24, 0xFF	; 255
 3d4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <start_stop>
		if (start_stop > 1)
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	c8 f0       	brcs	.+50     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{
			start_stop = 0;
 3dc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <start_stop>
 3e0:	16 c0       	rjmp	.+44     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		}
	}
	else // Если с компьютера приходит любое другое значение, расцениваем его, как температуру
	{
		uint8_t data = Data_s_t - '0'; // Переводим данные, полученные с компьютера, в численное значение
 3e2:	80 53       	subi	r24, 0x30	; 48

		rx_buffer[rx_buffer_index] = data;
 3e4:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <rx_buffer_index>
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	e0 50       	subi	r30, 0x00	; 0
 3ec:	ff 4f       	sbci	r31, 0xFF	; 255
 3ee:	80 83       	st	Z, r24
		rx_buffer_index++;
 3f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rx_buffer_index>
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
 3f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <rx_buffer_index>
		if (rx_buffer_index != 1 && rx_buffer_index != 2)
 3fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rx_buffer_index>
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	31 f0       	breq	.+12     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 402:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rx_buffer_index>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	11 f0       	breq	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{
			rx_buffer_index = 0;
 40a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <rx_buffer_index>
		}
	}
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	8f 91       	pop	r24
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

Disassembly of section .text.start_stop_allow:

000006ce <start_stop_allow>:

uint8_t start_stop_allow() // Функция для передачи значения start_stop в другие модули
{
	return start_stop;
}
 6ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <start_stop>
 6d2:	08 95       	ret

Disassembly of section .text.USART_Init:

00000616 <USART_Init>:

void USART_Init(unsigned int UBRR) // Функция инициализации ЮСАРТа
{
	// Устанавливаем скорость передачи
	UBRR0H = (unsigned char)(UBRR>>8);
 616:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)UBRR;
 61a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // Разрешаем чтение, запись и прирывания для ЮСАРТа
 61e:	88 e9       	ldi	r24, 0x98	; 152
 620:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00); // 8 bit, 1 stopbit
 624:	8e e0       	ldi	r24, 0x0E	; 14
 626:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 62a:	08 95       	ret

Disassembly of section .text.overwriting:

00000560 <overwriting>:
		}
	}
}

uint8_t overwriting(uint8_t data) // Функция, которая переписывает значение температуры 1234 -> 4321 
{
 560:	28 2f       	mov	r18, r24
	uint8_t newData = 0;
 562:	80 e0       	ldi	r24, 0x00	; 0
	while(data > 0)
 564:	15 c0       	rjmp	.+42     	; 0x590 <overwriting+0x30>
	{
		newData = newData*10 + (data % 10);
 566:	88 0f       	add	r24, r24
 568:	98 2f       	mov	r25, r24
 56a:	99 0f       	add	r25, r25
 56c:	99 0f       	add	r25, r25
 56e:	89 0f       	add	r24, r25
 570:	9d ec       	ldi	r25, 0xCD	; 205
 572:	29 9f       	mul	r18, r25
 574:	91 2d       	mov	r25, r1
 576:	11 24       	eor	r1, r1
 578:	96 95       	lsr	r25
 57a:	96 95       	lsr	r25
 57c:	96 95       	lsr	r25
 57e:	49 2f       	mov	r20, r25
 580:	44 0f       	add	r20, r20
 582:	34 2f       	mov	r19, r20
 584:	33 0f       	add	r19, r19
 586:	33 0f       	add	r19, r19
 588:	34 0f       	add	r19, r20
 58a:	23 1b       	sub	r18, r19
 58c:	82 0f       	add	r24, r18
		data = data/10;
 58e:	29 2f       	mov	r18, r25
}

uint8_t overwriting(uint8_t data) // Функция, которая переписывает значение температуры 1234 -> 4321 
{
	uint8_t newData = 0;
	while(data > 0)
 590:	21 11       	cpse	r18, r1
 592:	e9 cf       	rjmp	.-46     	; 0x566 <overwriting+0x6>
	{
		newData = newData*10 + (data % 10);
		data = data/10;
	}
	return newData;
}
 594:	08 95       	ret

Disassembly of section .text.send:

000000d6 <send>:
	UCSR0C = (1<<USBS0)|(3<<UCSZ00); // 8 bit, 1 stopbit
}

void send(uint8_t data) // Функция отправки данных по ЮСАРТ
{	
	if(data > 0)//Если значение температуры положительное, добавляем перед ним плюс
  d6:	88 23       	and	r24, r24
  d8:	39 f0       	breq	.+14     	; 0xe8 <send+0x12>
	{
		while (!(UCSR0A & (1<<UDRE0))); // Проверяем буфер перед отправкой
  da:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  de:	95 ff       	sbrs	r25, 5
  e0:	fc cf       	rjmp	.-8      	; 0xda <send+0x4>
		UDR0 = '+'; //Записываем мплюс в буфер для отправки
  e2:	9b e2       	ldi	r25, 0x2B	; 43
  e4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
	data = fabs(data); // Берем модуль от значения температуры
	data = overwriting(data); //Переписываем значение температуры 1234 -> 4321. Так надо.
  e8:	0e 94 b0 02 	call	0x560	; 0x560 <overwriting>
	uint8_t c; // В c будем записывать по очереди цифры из data для отправки через ЮСАРТ
	while(data > 0)
  ec:	6e c0       	rjmp	.+220    	; 0x1ca <send+0xf4>
	{
		c = 0;
		c += data%10; // Отделяем крайнюю правую цифру от переменной data и записываем ее в переменную с (не выводит 0. Сделать так, чтобы выводило)
  ee:	9d ec       	ldi	r25, 0xCD	; 205
  f0:	89 9f       	mul	r24, r25
  f2:	91 2d       	mov	r25, r1
  f4:	11 24       	eor	r1, r1
  f6:	e9 2f       	mov	r30, r25
  f8:	e6 95       	lsr	r30
  fa:	e6 95       	lsr	r30
  fc:	e6 95       	lsr	r30
  fe:	4e 2f       	mov	r20, r30
 100:	44 0f       	add	r20, r20
 102:	e4 2f       	mov	r30, r20
 104:	ee 0f       	add	r30, r30
 106:	ee 0f       	add	r30, r30
 108:	4e 0f       	add	r20, r30
 10a:	e8 2f       	mov	r30, r24
 10c:	e4 1b       	sub	r30, r20
		data = data/10; // Стираем крайнюю правую цифру из переменной дата
 10e:	89 2f       	mov	r24, r25
 110:	86 95       	lsr	r24
 112:	86 95       	lsr	r24
 114:	86 95       	lsr	r24
		switch(c) // Рассматриваем значение с
 116:	4e 2f       	mov	r20, r30
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	4a 30       	cpi	r20, 0x0A	; 10
 11c:	51 05       	cpc	r21, r1
 11e:	08 f0       	brcs	.+2      	; 0x122 <send+0x4c>
 120:	54 c0       	rjmp	.+168    	; 0x1ca <send+0xf4>
 122:	fa 01       	movw	r30, r20
 124:	ec 5c       	subi	r30, 0xCC	; 204
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__tablejump2__>
		{
			case 0: // Если в с записан 0 
				while (!(UCSR0A & (1<<UDRE0))); // Проверяем буфер перед отправкой
 12c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 130:	95 ff       	sbrs	r25, 5
 132:	fc cf       	rjmp	.-8      	; 0x12c <send+0x56>
				UDR0 = '0'; //Записываем значение с в буфер для отправки
 134:	90 e3       	ldi	r25, 0x30	; 48
 136:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 13a:	47 c0       	rjmp	.+142    	; 0x1ca <send+0xf4>
			case 1:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 13c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 140:	95 ff       	sbrs	r25, 5
 142:	fc cf       	rjmp	.-8      	; 0x13c <send+0x66>
				UDR0 = '1'; //Записываем значение с в буфер для отправки
 144:	91 e3       	ldi	r25, 0x31	; 49
 146:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 14a:	3f c0       	rjmp	.+126    	; 0x1ca <send+0xf4>
			case 2:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 14c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 150:	95 ff       	sbrs	r25, 5
 152:	fc cf       	rjmp	.-8      	; 0x14c <send+0x76>
				UDR0 = '2'; //Записываем значение с в буфер для отправки
 154:	92 e3       	ldi	r25, 0x32	; 50
 156:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 15a:	37 c0       	rjmp	.+110    	; 0x1ca <send+0xf4>
			case 3:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 15c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 160:	95 ff       	sbrs	r25, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <send+0x86>
				UDR0 = '3'; //Записываем значение с в буфер для отправки
 164:	93 e3       	ldi	r25, 0x33	; 51
 166:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 16a:	2f c0       	rjmp	.+94     	; 0x1ca <send+0xf4>
			case 4:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 16c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 170:	95 ff       	sbrs	r25, 5
 172:	fc cf       	rjmp	.-8      	; 0x16c <send+0x96>
				UDR0 = '4';
 174:	94 e3       	ldi	r25, 0x34	; 52
 176:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 17a:	27 c0       	rjmp	.+78     	; 0x1ca <send+0xf4>
			case 5:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 17c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 180:	95 ff       	sbrs	r25, 5
 182:	fc cf       	rjmp	.-8      	; 0x17c <send+0xa6>
				UDR0 = '5'; //Записываем значение с в буфер для отправки
 184:	95 e3       	ldi	r25, 0x35	; 53
 186:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 18a:	1f c0       	rjmp	.+62     	; 0x1ca <send+0xf4>
			case 6:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 18c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 190:	95 ff       	sbrs	r25, 5
 192:	fc cf       	rjmp	.-8      	; 0x18c <send+0xb6>
				UDR0 = '6'; //Записываем значение с в буфер для отправки
 194:	96 e3       	ldi	r25, 0x36	; 54
 196:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 19a:	17 c0       	rjmp	.+46     	; 0x1ca <send+0xf4>
			case 7:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 19c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a0:	95 ff       	sbrs	r25, 5
 1a2:	fc cf       	rjmp	.-8      	; 0x19c <send+0xc6>
				UDR0 = '7'; //Записываем значение с в буфер для отправки
 1a4:	97 e3       	ldi	r25, 0x37	; 55
 1a6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 1aa:	0f c0       	rjmp	.+30     	; 0x1ca <send+0xf4>
			case 8:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 1ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1b0:	95 ff       	sbrs	r25, 5
 1b2:	fc cf       	rjmp	.-8      	; 0x1ac <send+0xd6>
				UDR0 = '8'; //Записываем значение с в буфер для отправки
 1b4:	98 e3       	ldi	r25, 0x38	; 56
 1b6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				break;
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <send+0xf4>
			case 9:
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
 1bc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c0:	95 ff       	sbrs	r25, 5
 1c2:	fc cf       	rjmp	.-8      	; 0x1bc <send+0xe6>
				UDR0 = '9'; //Записываем значение с в буфер для отправки
 1c4:	99 e3       	ldi	r25, 0x39	; 57
 1c6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		UDR0 = '+'; //Записываем мплюс в буфер для отправки
	}
	data = fabs(data); // Берем модуль от значения температуры
	data = overwriting(data); //Переписываем значение температуры 1234 -> 4321. Так надо.
	uint8_t c; // В c будем записывать по очереди цифры из data для отправки через ЮСАРТ
	while(data > 0)
 1ca:	81 11       	cpse	r24, r1
 1cc:	90 cf       	rjmp	.-224    	; 0xee <send+0x18>
				while ( !( UCSR0A & (1<<UDRE0)) ); // Проверяем буфер перед отправкой
				UDR0 = '9'; //Записываем значение с в буфер для отправки
				break;
		}
	}
}
 1ce:	08 95       	ret

Disassembly of section .text.uart_read:

000005e4 <uart_read>:
}


uint8_t uart_read(void)
{
	Data_to_share = rx_buffer[0]*10 + rx_buffer[1]; // записываем значение полученной с компьютера температуры в целочисленную переменную для отправки в блок commands
 5e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <tx_buffer>
 5ec:	88 0f       	add	r24, r24
 5ee:	28 2f       	mov	r18, r24
 5f0:	22 0f       	add	r18, r18
 5f2:	22 0f       	add	r18, r18
 5f4:	82 0f       	add	r24, r18
 5f6:	89 0f       	add	r24, r25
 5f8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Data_to_share>
	return Data_to_share;
}
 5fc:	08 95       	ret

Disassembly of section .text:

0000041e <__fixunssfsi>:
 41e:	0e 94 96 02 	call	0x52c	; 0x52c <__fp_splitA>
 422:	88 f0       	brcs	.+34     	; 0x446 <__fixunssfsi+0x28>
 424:	9f 57       	subi	r25, 0x7F	; 127
 426:	98 f0       	brcs	.+38     	; 0x44e <__fixunssfsi+0x30>
 428:	b9 2f       	mov	r27, r25
 42a:	99 27       	eor	r25, r25
 42c:	b7 51       	subi	r27, 0x17	; 23
 42e:	b0 f0       	brcs	.+44     	; 0x45c <__fixunssfsi+0x3e>
 430:	e1 f0       	breq	.+56     	; 0x46a <__fixunssfsi+0x4c>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	88 1f       	adc	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	1a f0       	brmi	.+6      	; 0x442 <__fixunssfsi+0x24>
 43c:	ba 95       	dec	r27
 43e:	c9 f7       	brne	.-14     	; 0x432 <__fixunssfsi+0x14>
 440:	14 c0       	rjmp	.+40     	; 0x46a <__fixunssfsi+0x4c>
 442:	b1 30       	cpi	r27, 0x01	; 1
 444:	91 f0       	breq	.+36     	; 0x46a <__fixunssfsi+0x4c>
 446:	0e 94 29 03 	call	0x652	; 0x652 <__fp_zero>
 44a:	b1 e0       	ldi	r27, 0x01	; 1
 44c:	08 95       	ret
 44e:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_zero>
 452:	67 2f       	mov	r22, r23
 454:	78 2f       	mov	r23, r24
 456:	88 27       	eor	r24, r24
 458:	b8 5f       	subi	r27, 0xF8	; 248
 45a:	39 f0       	breq	.+14     	; 0x46a <__fixunssfsi+0x4c>
 45c:	b9 3f       	cpi	r27, 0xF9	; 249
 45e:	cc f3       	brlt	.-14     	; 0x452 <__fixunssfsi+0x34>
 460:	86 95       	lsr	r24
 462:	77 95       	ror	r23
 464:	67 95       	ror	r22
 466:	b3 95       	inc	r27
 468:	d9 f7       	brne	.-10     	; 0x460 <__fixunssfsi+0x42>
 46a:	3e f4       	brtc	.+14     	; 0x47a <__fixunssfsi+0x5c>
 46c:	90 95       	com	r25
 46e:	80 95       	com	r24
 470:	70 95       	com	r23
 472:	61 95       	neg	r22
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	8f 4f       	sbci	r24, 0xFF	; 255
 478:	9f 4f       	sbci	r25, 0xFF	; 255
 47a:	08 95       	ret

Disassembly of section .text:

0000033c <__floatunsisf>:
 33c:	e8 94       	clt
 33e:	09 c0       	rjmp	.+18     	; 0x352 <__floatsisf+0x12>

00000340 <__floatsisf>:
 340:	97 fb       	bst	r25, 7
 342:	3e f4       	brtc	.+14     	; 0x352 <__floatsisf+0x12>
 344:	90 95       	com	r25
 346:	80 95       	com	r24
 348:	70 95       	com	r23
 34a:	61 95       	neg	r22
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	8f 4f       	sbci	r24, 0xFF	; 255
 350:	9f 4f       	sbci	r25, 0xFF	; 255
 352:	99 23       	and	r25, r25
 354:	a9 f0       	breq	.+42     	; 0x380 <__floatsisf+0x40>
 356:	f9 2f       	mov	r31, r25
 358:	96 e9       	ldi	r25, 0x96	; 150
 35a:	bb 27       	eor	r27, r27
 35c:	93 95       	inc	r25
 35e:	f6 95       	lsr	r31
 360:	87 95       	ror	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b7 95       	ror	r27
 368:	f1 11       	cpse	r31, r1
 36a:	f8 cf       	rjmp	.-16     	; 0x35c <__floatsisf+0x1c>
 36c:	fa f4       	brpl	.+62     	; 0x3ac <__floatsisf+0x6c>
 36e:	bb 0f       	add	r27, r27
 370:	11 f4       	brne	.+4      	; 0x376 <__floatsisf+0x36>
 372:	60 ff       	sbrs	r22, 0
 374:	1b c0       	rjmp	.+54     	; 0x3ac <__floatsisf+0x6c>
 376:	6f 5f       	subi	r22, 0xFF	; 255
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	8f 4f       	sbci	r24, 0xFF	; 255
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	16 c0       	rjmp	.+44     	; 0x3ac <__floatsisf+0x6c>
 380:	88 23       	and	r24, r24
 382:	11 f0       	breq	.+4      	; 0x388 <__floatsisf+0x48>
 384:	96 e9       	ldi	r25, 0x96	; 150
 386:	11 c0       	rjmp	.+34     	; 0x3aa <__floatsisf+0x6a>
 388:	77 23       	and	r23, r23
 38a:	21 f0       	breq	.+8      	; 0x394 <__floatsisf+0x54>
 38c:	9e e8       	ldi	r25, 0x8E	; 142
 38e:	87 2f       	mov	r24, r23
 390:	76 2f       	mov	r23, r22
 392:	05 c0       	rjmp	.+10     	; 0x39e <__floatsisf+0x5e>
 394:	66 23       	and	r22, r22
 396:	71 f0       	breq	.+28     	; 0x3b4 <__floatsisf+0x74>
 398:	96 e8       	ldi	r25, 0x86	; 134
 39a:	86 2f       	mov	r24, r22
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	2a f0       	brmi	.+10     	; 0x3ac <__floatsisf+0x6c>
 3a2:	9a 95       	dec	r25
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	88 1f       	adc	r24, r24
 3aa:	da f7       	brpl	.-10     	; 0x3a2 <__floatsisf+0x62>
 3ac:	88 0f       	add	r24, r24
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	97 f9       	bld	r25, 7
 3b4:	08 95       	ret

Disassembly of section .text:

0000051c <__fp_split3>:
 51c:	57 fd       	sbrc	r21, 7
 51e:	90 58       	subi	r25, 0x80	; 128
 520:	44 0f       	add	r20, r20
 522:	55 1f       	adc	r21, r21
 524:	59 f0       	breq	.+22     	; 0x53c <__fp_splitA+0x10>
 526:	5f 3f       	cpi	r21, 0xFF	; 255
 528:	71 f0       	breq	.+28     	; 0x546 <__fp_splitA+0x1a>
 52a:	47 95       	ror	r20

0000052c <__fp_splitA>:
 52c:	88 0f       	add	r24, r24
 52e:	97 fb       	bst	r25, 7
 530:	99 1f       	adc	r25, r25
 532:	61 f0       	breq	.+24     	; 0x54c <__fp_splitA+0x20>
 534:	9f 3f       	cpi	r25, 0xFF	; 255
 536:	79 f0       	breq	.+30     	; 0x556 <__fp_splitA+0x2a>
 538:	87 95       	ror	r24
 53a:	08 95       	ret
 53c:	12 16       	cp	r1, r18
 53e:	13 06       	cpc	r1, r19
 540:	14 06       	cpc	r1, r20
 542:	55 1f       	adc	r21, r21
 544:	f2 cf       	rjmp	.-28     	; 0x52a <__fp_split3+0xe>
 546:	46 95       	lsr	r20
 548:	f1 df       	rcall	.-30     	; 0x52c <__fp_splitA>
 54a:	08 c0       	rjmp	.+16     	; 0x55c <__fp_splitA+0x30>
 54c:	16 16       	cp	r1, r22
 54e:	17 06       	cpc	r1, r23
 550:	18 06       	cpc	r1, r24
 552:	99 1f       	adc	r25, r25
 554:	f1 cf       	rjmp	.-30     	; 0x538 <__fp_splitA+0xc>
 556:	86 95       	lsr	r24
 558:	71 05       	cpc	r23, r1
 55a:	61 05       	cpc	r22, r1
 55c:	08 94       	sec
 55e:	08 95       	ret

Disassembly of section .text:

00000652 <__fp_zero>:
 652:	e8 94       	clt

00000654 <__fp_szero>:
 654:	bb 27       	eor	r27, r27
 656:	66 27       	eor	r22, r22
 658:	77 27       	eor	r23, r23
 65a:	cb 01       	movw	r24, r22
 65c:	97 f9       	bld	r25, 7
 65e:	08 95       	ret

Disassembly of section .text:

000006c6 <__mulsf3>:
 6c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <__mulsf3x>
 6ca:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__fp_round>

Disassembly of section .text:

000001d0 <__mulsf3x>:
 1d0:	0f c0       	rjmp	.+30     	; 0x1f0 <__mulsf3x+0x20>
 1d2:	0e 94 30 03 	call	0x660	; 0x660 <__fp_pscA>
 1d6:	38 f0       	brcs	.+14     	; 0x1e6 <__mulsf3x+0x16>
 1d8:	0e 94 37 03 	call	0x66e	; 0x66e <__fp_pscB>
 1dc:	20 f0       	brcs	.+8      	; 0x1e6 <__mulsf3x+0x16>
 1de:	95 23       	and	r25, r21
 1e0:	11 f0       	breq	.+4      	; 0x1e6 <__mulsf3x+0x16>
 1e2:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_inf>
 1e6:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_nan>
 1ea:	11 24       	eor	r1, r1
 1ec:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>
 1f0:	0e 94 8e 02 	call	0x51c	; 0x51c <__fp_split3>
 1f4:	70 f3       	brcs	.-36     	; 0x1d2 <__mulsf3x+0x2>

000001f6 <__mulsf3_pse>:
 1f6:	95 9f       	mul	r25, r21
 1f8:	c1 f3       	breq	.-16     	; 0x1ea <__mulsf3x+0x1a>
 1fa:	95 0f       	add	r25, r21
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	55 1f       	adc	r21, r21
 200:	62 9f       	mul	r22, r18
 202:	f0 01       	movw	r30, r0
 204:	72 9f       	mul	r23, r18
 206:	bb 27       	eor	r27, r27
 208:	f0 0d       	add	r31, r0
 20a:	b1 1d       	adc	r27, r1
 20c:	63 9f       	mul	r22, r19
 20e:	aa 27       	eor	r26, r26
 210:	f0 0d       	add	r31, r0
 212:	b1 1d       	adc	r27, r1
 214:	aa 1f       	adc	r26, r26
 216:	64 9f       	mul	r22, r20
 218:	66 27       	eor	r22, r22
 21a:	b0 0d       	add	r27, r0
 21c:	a1 1d       	adc	r26, r1
 21e:	66 1f       	adc	r22, r22
 220:	82 9f       	mul	r24, r18
 222:	22 27       	eor	r18, r18
 224:	b0 0d       	add	r27, r0
 226:	a1 1d       	adc	r26, r1
 228:	62 1f       	adc	r22, r18
 22a:	73 9f       	mul	r23, r19
 22c:	b0 0d       	add	r27, r0
 22e:	a1 1d       	adc	r26, r1
 230:	62 1f       	adc	r22, r18
 232:	83 9f       	mul	r24, r19
 234:	a0 0d       	add	r26, r0
 236:	61 1d       	adc	r22, r1
 238:	22 1f       	adc	r18, r18
 23a:	74 9f       	mul	r23, r20
 23c:	33 27       	eor	r19, r19
 23e:	a0 0d       	add	r26, r0
 240:	61 1d       	adc	r22, r1
 242:	23 1f       	adc	r18, r19
 244:	84 9f       	mul	r24, r20
 246:	60 0d       	add	r22, r0
 248:	21 1d       	adc	r18, r1
 24a:	82 2f       	mov	r24, r18
 24c:	76 2f       	mov	r23, r22
 24e:	6a 2f       	mov	r22, r26
 250:	11 24       	eor	r1, r1
 252:	9f 57       	subi	r25, 0x7F	; 127
 254:	50 40       	sbci	r21, 0x00	; 0
 256:	9a f0       	brmi	.+38     	; 0x27e <__mulsf3_pse+0x88>
 258:	f1 f0       	breq	.+60     	; 0x296 <__mulsf3_pse+0xa0>
 25a:	88 23       	and	r24, r24
 25c:	4a f0       	brmi	.+18     	; 0x270 <__mulsf3_pse+0x7a>
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	bb 1f       	adc	r27, r27
 264:	66 1f       	adc	r22, r22
 266:	77 1f       	adc	r23, r23
 268:	88 1f       	adc	r24, r24
 26a:	91 50       	subi	r25, 0x01	; 1
 26c:	50 40       	sbci	r21, 0x00	; 0
 26e:	a9 f7       	brne	.-22     	; 0x25a <__mulsf3_pse+0x64>
 270:	9e 3f       	cpi	r25, 0xFE	; 254
 272:	51 05       	cpc	r21, r1
 274:	80 f0       	brcs	.+32     	; 0x296 <__mulsf3_pse+0xa0>
 276:	0c 94 4a 03 	jmp	0x694	; 0x694 <__fp_inf>
 27a:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_szero>
 27e:	5f 3f       	cpi	r21, 0xFF	; 255
 280:	e4 f3       	brlt	.-8      	; 0x27a <__mulsf3_pse+0x84>
 282:	98 3e       	cpi	r25, 0xE8	; 232
 284:	d4 f3       	brlt	.-12     	; 0x27a <__mulsf3_pse+0x84>
 286:	86 95       	lsr	r24
 288:	77 95       	ror	r23
 28a:	67 95       	ror	r22
 28c:	b7 95       	ror	r27
 28e:	f7 95       	ror	r31
 290:	e7 95       	ror	r30
 292:	9f 5f       	subi	r25, 0xFF	; 255
 294:	c1 f7       	brne	.-16     	; 0x286 <__mulsf3_pse+0x90>
 296:	fe 2b       	or	r31, r30
 298:	88 0f       	add	r24, r24
 29a:	91 1d       	adc	r25, r1
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	97 f9       	bld	r25, 7
 2a2:	08 95       	ret

Disassembly of section .text:

00000694 <__fp_inf>:
 694:	97 f9       	bld	r25, 7
 696:	9f 67       	ori	r25, 0x7F	; 127
 698:	80 e8       	ldi	r24, 0x80	; 128
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	08 95       	ret

Disassembly of section .text:

000006d4 <__fp_nan>:
 6d4:	9f ef       	ldi	r25, 0xFF	; 255
 6d6:	80 ec       	ldi	r24, 0xC0	; 192
 6d8:	08 95       	ret

Disassembly of section .text:

00000660 <__fp_pscA>:
 660:	00 24       	eor	r0, r0
 662:	0a 94       	dec	r0
 664:	16 16       	cp	r1, r22
 666:	17 06       	cpc	r1, r23
 668:	18 06       	cpc	r1, r24
 66a:	09 06       	cpc	r0, r25
 66c:	08 95       	ret

Disassembly of section .text:

0000066e <__fp_pscB>:
 66e:	00 24       	eor	r0, r0
 670:	0a 94       	dec	r0
 672:	12 16       	cp	r1, r18
 674:	13 06       	cpc	r1, r19
 676:	14 06       	cpc	r1, r20
 678:	05 06       	cpc	r0, r21
 67a:	08 95       	ret

Disassembly of section .text:

000005c2 <__fp_round>:
 5c2:	09 2e       	mov	r0, r25
 5c4:	03 94       	inc	r0
 5c6:	00 0c       	add	r0, r0
 5c8:	11 f4       	brne	.+4      	; 0x5ce <__fp_round+0xc>
 5ca:	88 23       	and	r24, r24
 5cc:	52 f0       	brmi	.+20     	; 0x5e2 <__fp_round+0x20>
 5ce:	bb 0f       	add	r27, r27
 5d0:	40 f4       	brcc	.+16     	; 0x5e2 <__fp_round+0x20>
 5d2:	bf 2b       	or	r27, r31
 5d4:	11 f4       	brne	.+4      	; 0x5da <__fp_round+0x18>
 5d6:	60 ff       	sbrs	r22, 0
 5d8:	04 c0       	rjmp	.+8      	; 0x5e2 <__fp_round+0x20>
 5da:	6f 5f       	subi	r22, 0xFF	; 255
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	08 95       	ret

Disassembly of section .text.libgcc:

000006a0 <__tablejump2__>:
 6a0:	ee 0f       	add	r30, r30
 6a2:	ff 1f       	adc	r31, r31
 6a4:	05 90       	lpm	r0, Z+
 6a6:	f4 91       	lpm	r31, Z
 6a8:	e0 2d       	mov	r30, r0
 6aa:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000006e4 <_fini>:
 6e4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000006e6 <__funcs_on_exit>:
 6e6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000006e8 <__simulator_exit>:
 6e8:	08 95       	ret

Disassembly of section .text.exit:

0000062c <exit>:
 62c:	ec 01       	movw	r28, r24
 62e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__funcs_on_exit>
 632:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_fini>
 636:	ce 01       	movw	r24, r28
 638:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__simulator_exit>
 63c:	ce 01       	movw	r24, r28
 63e:	0e 94 6f 03 	call	0x6de	; 0x6de <_Exit>

Disassembly of section .text._Exit:

000006de <_Exit>:
 6de:	0e 94 69 00 	call	0xd2	; 0xd2 <_exit>
